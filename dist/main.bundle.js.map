{"version":3,"sources":["webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/mainview/mathjax/mathjax.directive.ts","webpack:///./src/app/mainview/unique.pipe.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/mainview/mainview.component.css","webpack:///./src/app/navbar/navbar.component.css","webpack:///./src/app/sidebar/sidebar.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/mainview/mainview.component.html","webpack:///./src/app/navbar/navbar.component.html","webpack:///./src/app/sidebar/sidebar.component.html","webpack:///./src/app/app.service.ts","webpack:///./src/app/config.service.ts","webpack:///./src/app/mainview/mainview.component.ts","webpack:///./src/app/navbar/navbar.component.ts","webpack:///./src/app/sidebar/sidebar.component.ts","webpack:///./src/environments/environment.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 119;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 119\n// module chunks = 1","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component, ViewChild } from '@angular/core';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { MainviewComponent } from './mainview/mainview.component';\r\nimport { SidebarComponent } from './sidebar/sidebar.component';\r\nimport { PageScrollConfig } from 'ng2-page-scroll';\r\n\r\n@Component({\r\n\tselector: 'app-root',\r\n\ttemplateUrl: './app.component.html',\r\n\tstyleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\tconstructor() {\r\n\t\tPageScrollConfig.defaultScrollOffset = 85;\r\n\t}\r\n\t@ViewChild(NavbarComponent) navbarComponent: NavbarComponent;\r\n\t@ViewChild(SidebarComponent) sidebarComponent: SidebarComponent;\r\n\t@ViewChild(MainviewComponent) mainviewCommponent: MainviewComponent;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\nimport { APP_INITIALIZER } from '@angular/core';\r\nimport { MultiselectDropdownModule } from '../../node_modules/angular-2-dropdown-multiselect';\r\nimport { ToasterModule } from 'angular2-toaster/angular2-toaster';\r\nimport { AppComponent } from './app.component';\r\nimport { MainviewComponent } from './mainview/mainview.component';\r\nimport { SidebarComponent } from './sidebar/sidebar.component';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { UniquePipe} from './mainview/unique.pipe';\r\nimport { NSSService } from './app.service';\r\nimport { MathjaxDirective } from './mainview/mathjax/mathjax.directive';\r\nimport { Ng2PageScrollModule } from 'ng2-page-scroll'; \r\nimport { ChartModule} from \"angular2-highcharts\";\r\nimport { HighchartsStatic } from 'angular2-highcharts/dist/HighchartsService';\r\nimport { ColorPickerModule} from 'ngx-color-picker';\r\ndeclare let require : any;\r\n\r\nimport { ConfigService } from \"app/config.service\";\r\nimport { environment } from '../environments/environment';\r\n\r\nexport function ConfigLoader(configService: ConfigService) {\r\n\t//Note: this factory needs to return a function (that returns a promise)\r\n\treturn () => configService.load(environment.configFile);\r\n}\r\n\r\nexport function highchartsFactory() {\r\n  // need this to be able to do exporting of charts\r\n  let hc = require('highcharts');\r\n  let exp = require('highcharts/modules/exporting');\r\n  exp(hc);\r\n  return hc;\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent, MainviewComponent, SidebarComponent, NavbarComponent, UniquePipe, MathjaxDirective\r\n  ],\r\n  imports: [\r\n    BrowserModule, FormsModule, HttpModule, ToasterModule, \r\n    MultiselectDropdownModule, Ng2PageScrollModule.forRoot(), ChartModule, ColorPickerModule\r\n  ],\r\n  providers: [NSSService,\r\n    { provide: HighchartsStatic, useFactory: highchartsFactory }, ConfigService,\r\n        { provide: APP_INITIALIZER, useFactory: ConfigLoader, deps: [ConfigService], multi:true}\r\n  ],\r\n  bootstrap: [AppComponent]\r\n}) \r\n\r\nexport class AppModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Directive, ElementRef, Input, Inject } from '@angular/core';\r\ndeclare var MathJax: {\r\n    Hub: {\r\n        Queue: (param: Object[]) => void;\r\n    }\r\n}\r\n@Directive({\r\n  selector: '[MathJax]'\r\n})\r\nexport class MathjaxDirective {\r\n  @Input('MathJax') fractionString: string;\r\n\r\n  constructor( @Inject(ElementRef) private el: ElementRef) {\r\n      MathJax.Hub.Queue([\"Typeset\", MathJax.Hub, this.el.nativeElement]);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mainview/mathjax/mathjax.directive.ts","import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as _ from 'lodash'; \r\n\r\n@Pipe({\r\n  name: 'unique',\r\n  pure: false\r\n})\r\n\r\nexport class UniquePipe implements PipeTransform {\r\n    transform(value: any): any{\r\n        if(value!== undefined && value!== null){\r\n            return _.uniqBy(value, 'name');\r\n        }\r\n        return value;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/mainview/unique.pipe.ts","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 195\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".mainPage {\\r\\n    width:auto;\\r\\n    margin-top: 102px;\\r\\n    margin-left: 345px;\\r\\n    position:relative;\\r\\n    box-sizing: border-box;\\r\\n    padding-right: 15px;\\r\\n    \\r\\n}\\r\\n\\r\\n.scrollable{\\r\\n    max-height:calc(100% - 70px);\\r\\n\\r\\n}\\r\\n.warning-text{\\r\\n    color:red;\\r\\n    font-style: italic;\\r\\n    font-size: small;\\r\\n}\\r\\n.reqError {\\r\\n    background-color: #efe1e1!important;\\r\\n    border: 1px solid #a94442!important;\\r\\n}\\r\\n.redFont {\\r\\n    color:red;\\r\\n}\\r\\n[hidden] { display: none !important;}\\r\\n[type=\\\"radio\\\"] {\\r\\n    position: initial !important;\\r\\n}\\r\\n[type=\\\"checkbox\\\"] {\\r\\n    position: initial !important;\\r\\n}\\r\\n@media print{\\r\\n    body * {\\r\\n        visibility: hidden;\\r\\n        -webkit-print-color-adjust: exact !important;\\r\\n    }\\r\\n    .hidden-print {\\r\\n        display: none !important;\\r\\n    }\\r\\n    #print-content * {\\r\\n        visibility: visible;\\r\\n    }\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/mainview/mainview.component.css\n// module id = 196\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"nav.wim-nav{\\r\\n    box-shadow: none;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/navbar/navbar.component.css\n// module id = 197\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".wim-sidebar {\\r\\n    background-color: #eceef4;\\r\\n    width: 300px;\\r\\n    pointer-events: auto;\\r\\n    position: fixed;\\r\\n    top: 70;\\r\\n    -webkit-transform: translate3d(0px, 0px, 0px);\\r\\n            transform: translate3d(0px, 0px, 0px);\\r\\n    z-index: 100;\\r\\n    margin-top: 70px;\\r\\n    height: 100%;\\r\\n    height: calc(100% - 70px);\\r\\n    overflow: auto;\\r\\n    box-sizing: border-box;\\r\\n    padding: 25px 15px;\\r\\n}\\r\\n\\r\\n.sidebar-item{\\r\\n    display: block;\\r\\n    box-sizing: border-box;\\r\\n    padding: 0 0 15px 0;\\r\\n}\\r\\n\\r\\n.wim-sidebar select{\\r\\n    background-color: white;\\r\\n}\\r\\n.wim-sidebar button{\\r\\n    width: 100%;\\r\\n}\\r\\n.wim-sidebar label{\\r\\n    display: block;\\r\\n}\\r\\n\\r\\nselect:focus{\\r\\n\\tbackground-image: url('data:image/svg+xml;utf8,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"14\\\" viewBox=\\\"0 0 29 14\\\" width=\\\"29\\\"><path fill=\\\"#0F8AFF\\\" d=\\\"M9.37727 3.625l5.08154 6.93523L19.54036 3.625\\\"/></svg>');\\r\\n}\\r\\n\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/sidebar/sidebar.component.css\n// module id = 198\n// module chunks = 1","module.exports = \"<wim-navbar></wim-navbar>\\r\\n<wim-sidebar></wim-sidebar>\\r\\n<wim-mainview></wim-mainview>    \\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 205\n// module chunks = 1","module.exports = \"<div id=\\\"printArea\\\" class=\\\"mainPage scrollable\\\">\\r\\n\\r\\n    <!-- toaster directive -->\\r\\n    <toaster-container></toaster-container>\\r\\n    <!-- / toaster directive -->\\r\\n\\r\\n    <div><h3>{{title}}</h3></div>\\r\\n    <div>{{timestamp | date:\\\"MMMM d, y hh:mma\\\"}}</div>\\r\\n\\r\\n    <div *ngIf=\\\"selectedRegion\\\">\\r\\n       <label>Region:</label>\\r\\n       <div>{{selectedRegion.Name}}</div>\\r\\n    </div>\\r\\n\\r\\n    <br/>\\r\\n    <div *ngIf=\\\"selectedStatisticGrp\\\">\\r\\n        <label>Statistic Group(s):</label>\\r\\n        <div>\\r\\n            <span *ngFor=\\\"let st of selectedStatisticGrp;let isLast=last\\\">{{st.Name}}{{isLast ? \\\"\\\" : \\\", \\\"}}</span>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <br />\\r\\n    <div *ngIf=\\\"selectedRegRegion\\\">\\r\\n        <label>Regression Group(s):</label>\\r\\n        <div>\\r\\n            <span *ngFor=\\\"let rr of selectedRegRegion;let isLast=last\\\">{{rr.Name}}{{isLast ? \\\"\\\" : \\\", \\\"}}</span>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <br />\\r\\n\\r\\n     <!-- scenarios && !resultsBack-->\\r\\n    <div class=\\\"hidden-print\\\" *ngIf=\\\"scenarios && !resultsBack\\\">\\r\\n        <label>Equation Variables</label>\\r\\n        <br/>\\r\\n        <div *ngIf=\\\"scenarios.length == 0\\\">There are no scenarios available for the options chosen.</div>\\r\\n        <form #scenarioForm=\\\"ngForm\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xs-11\\\" *ngFor=\\\"let sc of scenarios;let sInd = index\\\">\\r\\n                    <h3>{{sc.StatisticGroupName}}</h3>\\r\\n                    <div class=\\\"col-xs-10\\\" *ngIf=\\\"sc.RegressionRegions?.length > 0\\\">\\r\\n                        <table class=\\\"table\\\">\\r\\n                            <tr *ngFor=\\\"let rr of sc.RegressionRegions;let rInd = index\\\">\\r\\n                                <td style=\\\"vertical-align:middle;\\\">{{rr.Name}} <span *ngIf=\\\"multipleRegRegions\\\" style=\\\"font-size: x-small\\\">(RG_ID: {{rr.ID}})</span></td>\\r\\n                                <td *ngIf=\\\"showWeights\\\" class=\\\"col-xs-3\\\" style=\\\"vertical-align:middle;text-align:end;\\\">% Area Weight:</td>\\r\\n                                <td *ngIf=\\\"showWeights\\\" class=\\\"col-xs-2\\\">\\r\\n                                    <input style=\\\"display:inline;\\\" type=\\\"text\\\" id=\\\"PercentWeight\\\"class=\\\"form-control\\\" (keypress)=\\\"_keyPress($event)\\\" name=\\\"PercentWeight-{{rInd}}\\\" [(ngModel)]=\\\"rr.PercentWeight\\\">\\r\\n                                </td>\\r\\n                            </tr>\\r\\n                        </table>\\r\\n                    </div><!-- end length > 0-->\\r\\n                    <div *ngIf=\\\"sc.RegressionRegions.length == 0\\\"><h3>There are no Results for your selection. Please try another .... </h3></div>\\r\\n                </div>  <!-- end ngFor scenarios -->\\r\\n            </div>\\r\\n            <table *ngIf=\\\"scenarios[0].RegressionRegions.length > 0\\\" style=\\\"border:solid 1px gray\\\" class=\\\"table\\\">\\r\\n                <thead>\\r\\n                    <tr>\\r\\n                        <th class=\\\"col-xs-5\\\">Parameter</th>\\r\\n                        <th>Code</th>\\r\\n                        <th class=\\\"col-xs-2\\\">Value</th>\\r\\n                        <th class=\\\"col-xs-1\\\" *ngIf=\\\"multipleRegRegions\\\"></th>\\r\\n                        <th class=\\\"col-xs-2\\\">Min Limit</th>\\r\\n                        <th class=\\\"col-xs-3\\\">Max Limit</th>\\r\\n                    </tr>\\r\\n                </thead>\\r\\n                <tbody>\\r\\n                    <tr *ngFor=\\\"let p of uniqueParameters;let pInd=index \\\">\\r\\n                        <td>{{p.Name}} <a (click)=\\\"showDescription(p, pInd)\\\"><span class=\\\"glyphicon glyphicon-question-sign nss-tooltip\\\"></span></a>\\r\\n                            <!-- description span -->\\r\\n                            <br *ngIf=\\\"p.seeDescription\\\"/>\\r\\n                            <span style=\\\"font-size:small;\\\" *ngIf=\\\"p.seeDescription\\\">{{p.Description}}</span>\\r\\n                            <!-- outOfRange span -->\\r\\n                            <br *ngIf=\\\"p.OutOfRange\\\"/>\\r\\n                            <span *ngIf=\\\"p.OutOfRange\\\" class=\\\"warning-text\\\">Warning: Parameter is outside of suggested range. Estimates will be extrapolations with unknown errors</span>\\r\\n                        </td>\\r\\n                        <td>{{p.Code}}</td>\\r\\n                        <td>\\r\\n                            <div class=\\\"col-xs-10\\\" style=\\\"margin-left:0;padding-left:0;\\\">\\r\\n                                <input class=\\\"form-control\\\" style=\\\"display:inline;width: 70%\\\" [ngClass]=\\\"{'reqError':p.missingVal}\\\" type=\\\"text\\\"\\r\\n                                        (keypress)=\\\"_keyPress($event)\\\" (blur)=\\\"compareValue(p)\\\" [(ngModel)]=\\\"p.Value\\\" name=\\\"Value-{{pInd}}\\\" required>\\r\\n                                (<span [innerHTML]=\\\"setSuperScript(p.UnitType.Abbr)\\\" style=\\\"display:inline;\\\"></span>)\\r\\n                            </div>\\r\\n                        </td>\\r\\n                        <td *ngIf=\\\"multipleRegRegions\\\">\\r\\n                            <span *ngFor=\\\"let l of p.LimitArray\\\">\\r\\n                                <span  class=\\\"pull-right\\\" style=\\\"white-space:nowrap;\\\" *ngIf=\\\"l != undefined\\\" [ngClass]=\\\"{'redFont':l.OutOfRange}\\\">\\r\\n                                    <span style=\\\"font-size: x-small\\\">{{l != undefined ? l.rrID : ''}}</span><br />\\r\\n                                </span>\\r\\n                            </span>\\r\\n                        </td>\\r\\n                        <td>\\r\\n                            <span *ngFor=\\\"let l of p.LimitArray\\\">\\r\\n                            <span *ngIf=\\\"l!=undefined\\\" style=\\\"white-space:nowrap;\\\" [ngClass]=\\\"{'redFont':l.OutOfRange}\\\">{{l != undefined ? sigFigures(l.Min): \\\"--\\\"}}\\r\\n                                (<span [innerHTML]=\\\"setSuperScript(p.UnitType.Abbr)\\\"></span>)\\r\\n                                <br/>\\r\\n                            </span>\\r\\n                        </span></td>\\r\\n                        <td>\\r\\n                            <span *ngFor=\\\"let l of p.LimitArray\\\">\\r\\n                                <span *ngIf=\\\"l!=undefined\\\" style=\\\"white-space:nowrap;\\\" [ngClass]=\\\"{'redFont':l.OutOfRange}\\\">{{l != undefined ? sigFigures(l.Max) : \\\"--\\\"}} (\\r\\n                                    <span [innerHTML]=\\\"setSuperScript(p.UnitType.Abbr)\\\"></span>)\\r\\n                                    <br/>\\r\\n                                </span>\\r\\n                            </span>\\r\\n                        </td>\\r\\n                    </tr>\\r\\n                </tbody>\\r\\n            </table>\\r\\n\\r\\n            <h2 style=\\\"margin:0;padding:0\\\">Citations</h2>\\r\\n            <div *ngFor=\\\"let sc of scenarios\\\">\\r\\n                <label *ngIf=\\\"sc.Citations\\\">{{sc.StatisticGroupName}} Citations</label>\\r\\n                <div *ngFor=\\\"let l of sc.Citations\\\">\\r\\n                    <a [href]=\\\"l.CitationURL\\\" [target]=\\\"_blank\\\">\\r\\n                        <div>{{l.Author}}</div>\\r\\n                        <div>{{l.Title}}</div>\\r\\n                    </a>\\r\\n                    <br />\\r\\n                </div>\\r\\n            </div><!--end foreach scenario (for citations) {{l != undefined ? l.rrID : ''}}-->\\r\\n        </form>\\r\\n    </div> <!--end if scenarios-->\\r\\n\\r\\n     <!-- resultsBack-->\\r\\n    <div *ngIf=\\\"resultsBack\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn-wim-primary hidden-print\\\" (click)=\\\"editScenario()\\\">Edit Scenario Parameters</button>\\r\\n        <div *ngFor=\\\"let s of scenarios\\\">\\r\\n            <h3>{{s.StatisticGroupName}}</h3>\\r\\n            <div *ngFor=\\\"let rr of s.RegressionRegions;let r = index\\\">\\r\\n                <div><!-- *ngIf=\\\"rr.ID > 0\\\">  -->\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-xs-12\\\">\\r\\n                            <a class=\\\"hidden-print\\\" (click)=\\\"exportInputTable(r)\\\" style=\\\"cursor: pointer\\\"><span class=\\\"glyphicon glyphicon-download-alt\\\"></span></a>\\r\\n                            <table #inputsTable>\\r\\n                                <tr><td>{{rr.Name}} Region</td></tr>\\r\\n                                <tr *ngIf=\\\"rr.PercentWeight\\\"><td>{{rr.PercentWeight}}% Weighted</td></tr>\\r\\n                                <tr *ngFor=\\\"let p of rr.Parameters\\\"><td>{{p.Name}} = {{p.Value}} (<span [innerHTML]=\\\"setSuperScript(p.UnitType.Abbr)\\\"></span>)</td></tr>\\r\\n                            </table>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <br />\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-xs-12\\\">\\r\\n                            <!--<a class=\\\"hidden-print\\\" (click)=\\\"exportTable(r)\\\" style=\\\"cursor: pointer\\\"><span class=\\\"glyphicon glyphicon-download-alt\\\"></span></a>-->\\r\\n                            <span>[SEe, Standard Error of Estimate; SEp, Standard Error of Prediction; SE, Standard Error (other -- see report)]</span>\\r\\n                            <table #resultsTable style=\\\"border:solid 1px gray\\\" class=\\\"table\\\">\\r\\n                                <thead>\\r\\n                                    <tr style=\\\"border-bottom: white solid;\\\">\\r\\n                                        <th class=\\\"col-xs-6\\\">{{rr.Name}} Region</th>\\r\\n                                        <th>Value</th>\\r\\n                                        <th *ngIf=\\\"rr.Results[0].IntervalBounds\\\" colspan=\\\"2\\\">Prediction Interval</th>\\r\\n                                        <th *ngIf=\\\"rr.Results[0].Errors && rr.Results[0].Errors.length > 0\\\" [attr.colspan]=\\\"rr.Results[0].Errors.length\\\">Errors (%)</th>\\r\\n                                        <th *ngIf=\\\"rr.Results[0].EquivalentYears>0\\\">Equivalent Yrs.</th>\\r\\n                                    </tr>\\r\\n                                    <tr>\\r\\n                                        <th class=\\\"col-xs-6\\\">Description</th>\\r\\n                                        <th>(<span [innerHTML]=\\\"setSuperScript(rr.Results[0].Unit.Abbr)\\\"></span>)</th>\\r\\n                                        <th *ngIf=\\\"rr.Results[0].IntervalBounds\\\">Low</th>\\r\\n                                        <th *ngIf=\\\"rr.Results[0].IntervalBounds\\\">High</th>\\r\\n                                        <th *ngFor=\\\"let e of rr.Results[0]?.Errors\\\">{{e.Code}}</th>\\r\\n                                        <th *ngIf=\\\"rr.Results[0].EquivalentYears>0\\\"></th><!--space for if Equivalent Yrs-->\\r\\n                                    </tr>\\r\\n                                </thead>\\r\\n                                <tbody>\\r\\n                                    <tr *ngFor=\\\"let result of rr.Results\\\">\\r\\n                                        <td>{{result.Description}} ({{result.code}})</td>\\r\\n                                        <td>{{sigFigures(result.Value)}}</td>\\r\\n                                        <td *ngIf=\\\"rr.Results[0].IntervalBounds\\\">{{result.IntervalBounds != undefined && result.IntervalBounds.Lower != \\\"NaN\\\" ? sigFigures(result.IntervalBounds.Lower) : '---'}}</td>\\r\\n                                        <td *ngIf=\\\"rr.Results[0].IntervalBounds\\\">{{result.IntervalBounds != undefined && result.IntervalBounds.Upper != \\\"NaN\\\" ? sigFigures(result.IntervalBounds.Upper) : '---'}}</td>\\r\\n                                        <td *ngFor=\\\"let e of result?.Errors\\\">{{e.Value}}</td>\\r\\n                                        <td *ngIf=\\\"rr.Results[0].EquivalentYears>0\\\">{{result.EquivalentYears > 0 && result.EquivalentYears !== 999 ? result.EquivalentYears : 'N/A'}}</td>\\r\\n                                    </tr>\\r\\n                                </tbody>\\r\\n                            </table>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div><!-- END rr.ID > 0\\r\\n                <div *ngIf=\\\"rr.ID == 0\\\">\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-xs-12\\\">\\r\\n                            <a class=\\\"hidden-print\\\" (click)=\\\"exportInputTable(r)\\\" style=\\\"cursor: pointer\\\"><span class=\\\"glyphicon glyphicon-download-alt\\\"></span></a>\\r\\n                            <table #inputsTable>\\r\\n                                <tr><td>{{rr.Name}}</td></tr>\\r\\n                            </table>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <br />\\r\\n                    <br />\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-xs-12\\\">\\r\\n                            <table #resultsTable style=\\\"border:solid 1px gray\\\" class=\\\"table\\\">\\r\\n                                <thead>\\r\\n                                    <tr>\\r\\n                                        <th class=\\\"col-xs-6\\\">Description</th>\\r\\n                                        <th>Value</th>\\r\\n                                        <th *ngIf=\\\"rr.Results[0].EquivalentYears>0\\\">Equivalent<br/>Years</th>\\r\\n                                    </tr>\\r\\n                                </thead>\\r\\n                                <tbody>\\r\\n                                    <tr *ngFor=\\\"let result of rr.Results\\\">\\r\\n                                        <td>{{result.Description}} ({{result.code}})</td>\\r\\n                                        <td>{{sigFigures(result.Value)}}</td>\\r\\n                                        <td *ngIf=\\\"rr.Results[0].EquivalentYears>0\\\">{{result.EquivalentYears}}</td>\\r\\n                                    </tr>\\r\\n                                </tbody>\\r\\n                            </table>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div> --><!-- end 'Area-averaged'-->\\r\\n            </div>\\r\\n        </div> <!-- end for each Scenario-->\\r\\n\\r\\n        <!-- Citations -->\\r\\n        <h2 id=\\\"citations\\\" style=\\\"margin:0;padding:0\\\">Citations</h2>\\r\\n        <div *ngFor=\\\"let sc of scenarios\\\">\\r\\n            <div *ngFor=\\\"let c of sc.Citations\\\"><!--\\\" | unique\\\">-->\\r\\n            <a [href]=\\\"c.CitationURL\\\" [target]=\\\"_blank\\\">\\r\\n                <div>{{c.Author}}</div>\\r\\n                <div>{{c.Title}}</div>\\r\\n            </a>\\r\\n            <br />\\r\\n        </div>\\r\\n        <!-- ngfor each chart being added show here\\r\\n            //if showCharts_btn is true == show the charts and showChartBtn_txt says \\\"Hide\\\"\\r\\n            //if showCharts_btn is false == hide the charts and showChartBtn_txt says \\\"Show\\\" -->\\r\\n        <!-- charts-->\\r\\n        <div id=\\\"chart\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xs-12\\\" *ngIf=\\\"hydroChartsArray.length >0\\\">\\r\\n                    <h2 style=\\\"display:inline-block;margin-right:42px;\\\">Charts</h2>\\r\\n                    <button class=\\\"hidden-print\\\" style=\\\"display:inline-block;\\\" type=\\\"button\\\" (click)=\\\"showHideCharts()\\\">{{showChartBtn_txt}}</button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div [hidden]=\\\"!showCharts_btn\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-xs-11\\\" *ngFor=\\\"let c of hydroChartsArray;let i = index\\\"> <!-- For Each hydroChartsArray start -->\\r\\n                        <div style=\\\"border:solid gray 1px;display:inline-block;margin-bottom:5px;\\\">\\r\\n                            <button type=\\\"button\\\" class=\\\"pull-right hidden-print\\\" (click)=\\\"removeHydroChart(i)\\\">x</button><br clear=\\\"all\\\" />\\r\\n                            <chart (load)=\\\"saveInstance($event.context)\\\" [options]=\\\"c\\\"></chart>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-xs-5 pull-right hidden-print\\\" *ngIf=\\\"selectedPlot=='Hydrograph'\\\">\\r\\n                            <!-- Start of FORM for hydrochart -->\\r\\n                            <form id=\\\"myChartForm\\\" name=\\\"myChartForm\\\" #myChartForm=\\\"ngForm\\\" (ngSubmit)=\\\"refreshHydrograph()\\\">\\r\\n                                <div class=\\\"form-group\\\">\\r\\n                                    <label class=\\\"col-xs-7\\\">Recurrence Interval:</label>\\r\\n                                    <div class=\\\"col-xs-5\\\">\\r\\n                                        <span class=\\\"select-wim\\\">\\r\\n                                            <select [(ngModel)]=\\\"hydrographs[i].recurrence\\\" (ngModelChange)=\\\"refreshHydrograph(i, myChartForm.form.controls)\\\" name=\\\"recurrence\\\">\\r\\n                                                <option [value]=\\\"r\\\" *ngFor=\\\"let r of hChartXAxisValues\\\">{{r}}</option>\\r\\n                                            </select>\\r\\n                                        </span>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <div class=\\\"form-group\\\" style=\\\"padding-top:5px;\\\">\\r\\n                                    <label class=\\\"col-xs-7\\\">Lag Time (hrs):</label>\\r\\n                                    <div class=\\\"col-xs-5\\\">\\r\\n                                        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"lagTime\\\" (keypress)=\\\"_keyPress($event)\\\" [(ngModel)]=\\\"hydrographs[i].lagTime\\\" (keyup)=\\\"refreshHydrograph(i, myChartForm.form.controls)\\\">\\r\\n                                    </div>\\r\\n                                </div>\\r\\n\\r\\n                                <br clear=\\\"all\\\" />\\r\\n                                <div class=\\\"pull-right hidden-print\\\"><a class=\\\"hidden-print\\\" (click)=\\\"showHideAdditionalChartSettings(i)\\\" style=\\\"cursor: pointer\\\">More options</a></div>\\r\\n                                <br clear=\\\"all\\\" />\\r\\n                                <div *ngIf=\\\"hydrographs[i]?.showExtraSettings\\\" [hidden]=\\\"!hydrographs[i].showExtraSettings\\\" class=\\\"panel panel-default hidden-print\\\">\\r\\n                                    <div class=\\\"panel-body\\\">\\r\\n                                        <div style=\\\"font-size: small\\\">\\r\\n                                            <span>* To zoom in, click and drag a box in the chart</span>\\r\\n\\r\\n                                        </div>\\r\\n                                        <!-- AXIS -->\\r\\n                                        <div>\\r\\n                                            <div style=\\\"font-size: large\\\">Axes</div>\\r\\n                                            <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                <label class=\\\"control-label\\\">Choose Axis to update:</label>\\r\\n                                                <div>\\r\\n                                                    <span style=\\\"padding-right: 10px\\\">\\r\\n                                                        <input type=\\\"radio\\\"  name=\\\"axis\\\" [(ngModel)]=\\\"hydrographs[i].axis\\\" value=\\\"BottomX\\\" (click)=\\\"axis='BottomX'\\\" />Bottom X\\r\\n                                                    </span>\\r\\n                                                    <span>\\r\\n                                                        <input type=\\\"radio\\\" name=\\\"axis\\\" [(ngModel)]=\\\"hydrographs[i].axis\\\" value=\\\"LeftY\\\" (click)=\\\"axis='LeftY'\\\" />Left Y\\r\\n                                                    </span>\\r\\n                                                </div>\\r\\n                                            </div> <!-- end (AXIS) form group  -->\\r\\n                                            <!-- TYPE -->\\r\\n                                            <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                <label class=\\\"control-label\\\">Type:</label>\\r\\n                                                <div [hidden]=\\\"hydrographs[i].axis != 'BottomX'\\\">\\r\\n                                                    <span style=\\\"padding-right:10px\\\">\\r\\n                                                        <input type=\\\"radio\\\" name=\\\"type_BX\\\" [(ngModel)]=\\\"hydrographs[i].type_BX\\\" (click)=\\\"setXaxisType(i, 'linear')\\\" value=\\\"linear\\\" />Linear\\r\\n                                                    </span>\\r\\n                                                    <span>\\r\\n                                                        <input type=\\\"radio\\\" name=\\\"type_BX\\\" [(ngModel)]=\\\"hydrographs[i].type_BX\\\" (click)=\\\"setXaxisType(i, 'logarithmic')\\\" value=\\\"logarithmic\\\" />Logarithmic\\r\\n                                                    </span>\\r\\n                                                </div>\\r\\n                                                <div [hidden]=\\\"hydrographs[i].axis != 'LeftY'\\\">\\r\\n                                                    <span style=\\\"padding-right: 10px\\\">\\r\\n                                                        <input type=\\\"radio\\\" name=\\\"type_LY\\\" [(ngModel)]=\\\"hydrographs[i].type_LY\\\" (click)=\\\"setYaxisType(i, 'linear')\\\" value=\\\"linear\\\" />Linear\\r\\n                                                    </span>\\r\\n                                                    <span>\\r\\n                                                        <input type=\\\"radio\\\" name=\\\"type_LY\\\" [(ngModel)]=\\\"hydrographs[i].type_LY\\\" (click)=\\\"setYaxisType(i, 'logarithmic')\\\" value=\\\"logarithmic\\\" />Logarithmic\\r\\n                                                    </span>\\r\\n                                                </div>\\r\\n                                            </div> <!-- end (TYPE) form group -->\\r\\n                                            <!-- TITLE -->\\r\\n                                            <div class=\\\"form-group  col-xs-12\\\">\\r\\n                                                <label class=\\\"control-label\\\">Axis Title:</label>\\r\\n                                                <div [hidden]=\\\"hydrographs[i].axis != 'BottomX'\\\">\\r\\n                                                    <textarea cols=\\\"60\\\" rows=\\\"4\\\" class=\\\"form-control\\\" [innerHTML]=\\\"hydrographs[i].title_BX\\\" name=\\\"title_BX\\\" (keyup)=\\\"updateBXtitle(i)\\\" [(ngModel)]=\\\"hydrographs[i].title_BX\\\"></textarea>\\r\\n                                                </div>\\r\\n                                                <div [hidden]=\\\"hydrographs[i].axis != 'LeftY'\\\">\\r\\n                                                    <textarea cols=\\\"60\\\" rows=\\\"4\\\" class=\\\"form-control\\\" [innerHTML]=\\\"hydrographs[i].title_LY\\\" name=\\\"title_LY\\\" (keyup)=\\\"updateLYtitle(i)\\\"  [(ngModel)]=\\\"hydrographs[i].title_LY\\\"></textarea>\\r\\n                                                </div>\\r\\n                                            </div> <!-- end (TITLE) form group -->\\r\\n                                            <!-- MAJOR UNITS -->\\r\\n                                            <div class=\\\"form-group col-xs-4\\\">\\r\\n                                                <label class=\\\"control-label\\\">Major Units:</label>\\r\\n                                                <div [hidden]=\\\"hydrographs[i].axis != 'BottomX'\\\">\\r\\n                                                    <span style=\\\"padding-right: 10px\\\"><input type=\\\"checkbox\\\" name=\\\"majorGrid_BX\\\" (change)=\\\"setXChartLines(i, 'gridLineWidth', $event.target.checked)\\\" [(ngModel)]=\\\"hydrographs[i].majorGrid_BX\\\" /> grid</span>\\r\\n                                                    <span><input type=\\\"checkbox\\\" name=\\\"majorTic_BX\\\" (change)=\\\"setXChartLines(i, 'tickWidth', $event.target.checked)\\\" [(ngModel)]=\\\"hydrographs[i].majorTic_BX\\\"  /> tics</span>\\r\\n                                                </div>\\r\\n                                                <div [hidden]=\\\"hydrographs[i].axis != 'LeftY'\\\">\\r\\n                                                    <span style=\\\"padding-right: 10px\\\"><input type=\\\"checkbox\\\" name=\\\"majorGrid_LY\\\" (change)=\\\"setYChartLines(i, 'gridLineWidth', $event.target.checked)\\\" [(ngModel)]=\\\"hydrographs[i].majorGrid_LY\\\" /> grid</span>\\r\\n                                                    <span><input type=\\\"checkbox\\\" name=\\\"majorTic_LY\\\" (change)=\\\"setYChartLines(i, 'tickWidth', $event.target.checked)\\\" [(ngModel)]=\\\"hydrographs[i].majorTic_LY\\\" /> tics</span>\\r\\n                                                </div>\\r\\n                                            </div> <!-- end (MAJOR UNITS) form group -->\\r\\n\\r\\n                                            <!-- MINOR UNITS -->\\r\\n                                            <div class=\\\"form-group col-xs-4\\\">\\r\\n                                                <label class=\\\"control-label\\\">Minor Units:</label>\\r\\n                                                <div [hidden]=\\\"hydrographs[i].axis != 'BottomX'\\\">\\r\\n                                                    <span style=\\\"padding-right: 10px\\\"><input [disabled]=\\\"hydrographs[i].type_BX == 'logarithmic'\\\" type=\\\"checkbox\\\" name=\\\"minorGrid_BX\\\" (change)=\\\"setXChartLines(i, 'minorGridLineWidth', $event.target.checked)\\\" [(ngModel)]=\\\"hydrographs[i].minorGrid_BX\\\"/> grid</span>\\r\\n                                                    <span style=\\\"padding-right:5px\\\"><input [disabled]=\\\"hydrographs[i].type_BX == 'logarithmic'\\\" type=\\\"checkbox\\\" name=\\\"minorTic_BX\\\" (change)=\\\"setXChartLines(i, 'minorTickWidth', $event.target.checked)\\\" [(ngModel)]=\\\"hydrographs[i].minorTic_BX\\\" /> tics</span>\\r\\n                                                    <span [hidden]=\\\"hydrographs[i].type_LY != 'logarithmic' && hydrographs[i].type_BX != 'logarithmic'\\\" style=\\\"font-size: small\\\">(Disabled with Log)</span>\\r\\n                                                </div>\\r\\n\\r\\n                                                <div [hidden]=\\\"hydrographs[i].axis != 'LeftY'\\\">\\r\\n                                                    <span style=\\\"padding-right: 10px\\\"><input [disabled]=\\\"hydrographs[i].type_LY == 'logarithmic'\\\" type=\\\"checkbox\\\" name=\\\"minorGrid_LY\\\" (change)=\\\"setYChartLines(i, 'minorGridLineWidth', $event.target.checked)\\\" [(ngModel)]=\\\"hydrographs[i].minorGrid_LY\\\" /> grid</span>\\r\\n                                                    <span style=\\\"padding-right:5px\\\"><input [disabled]=\\\"hydrographs[i].type_LY == 'logarithmic'\\\" type=\\\"checkbox\\\" name=\\\"minorTic_LY\\\" (change)=\\\"setYChartLines(i, 'minorTickWidth', $event.target.checked)\\\" [(ngModel)]=\\\"hydrographs[i].minorTic_LY\\\" /> tics</span>\\r\\n                                                    <span [hidden]=\\\"hydrographs[i].type_LY != 'logarithmic' && hydrographs[i].type_BX != 'logarithmic'\\\" style=\\\"font-size: x-small;font-weight: bold\\\">(Disabled with Log)</span>\\r\\n                                                </div>\\r\\n                                            </div> <!-- end (MINOR UNITS) form group -->\\r\\n                                            <div class=\\\"form-group col-xs-4\\\">\\r\\n                                                <label class=\\\"control-label\\\">\\r\\n                                                    <div [hidden]=\\\"hydrographs[i].axis != 'BottomX'\\\">\\r\\n                                                        <span><input type=\\\"checkbox\\\" name=\\\"reverse_BX\\\" (change)=\\\"setReverseData(i, 'bx', $event.target.checked)\\\" [(ngModel)]=\\\"hydrographs[i].reverse_BX\\\"/> reverse</span>\\r\\n                                                    </div>\\r\\n                                                    <div [hidden]=\\\"hydrographs[i].axis != 'LeftY'\\\">\\r\\n                                                        <span><input type=\\\"checkbox\\\" name=\\\"reverse_LY\\\" (change)=\\\"setReverseData(i, 'ly', $event.target.checked)\\\" [(ngModel)]=\\\"hydrographs[i].reverse_LY\\\"/> reverse</span>\\r\\n                                                    </div>\\r\\n                                                </label>\\r\\n                                            </div>\\r\\n                                        </div><!-- end Axes -->\\r\\n                                        <br clear=\\\"all\\\"/>\\r\\n                                        <!--Curves and Legend-->\\r\\n                                        <div>\\r\\n                                            <div style=\\\"font-size: large\\\">Curves and Legend</div>\\r\\n                                            <div><!--Curves color/width -->\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">Curve Color:</label>\\r\\n                                                  <div><input [colorPicker]=\\\"hydrographs[i].colorPickerColor\\\" (colorPickerChange)=\\\"changeLineColor(i,$event)\\\" [style.background]=\\\"hydrographs[i].colorPickerColor\\\" [value]=\\\"hydrographs[i].colorPickerColor\\\"/></div>\\r\\n                                                </div>\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">Curve Width:</label>\\r\\n                                                    <div><input type=\\\"text\\\" name=\\\"lineWidth\\\" (keyup)=\\\"setLineWidth(i)\\\" [(ngModel)]=\\\"hydrographs[i].lineWidth\\\"/></div>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                            <div><!-- Line symbol color/point symbol -->\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">Line Symbol Color:</label>\\r\\n                                                    <div><input [colorPicker]=\\\"hydrographs[i].lineSymbolFillColor\\\" (colorPickerChange)=\\\"changeLineSymbolColor(i,$event)\\\" [style.background]=\\\"hydrographs[i].lineSymbolFillColor\\\" [value]=\\\"hydrographs[i].lineSymbolFillColor\\\"/></div>\\r\\n                                                </div>\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">Point Symbol:</label>\\r\\n                                                    <div>\\r\\n                                                        <span class=\\\"select-wim\\\">\\r\\n                                                            <select [(ngModel)]=\\\"hydrographs[i].lineSymbol\\\" (ngModelChange)=\\\"setLineSymbol(i,$event)\\\" name=\\\"lineSymbol\\\">\\r\\n                                                                <option value=\\\"circle\\\">Circle</option>\\r\\n                                                                <option value=\\\"square\\\">Square</option>\\r\\n                                                                <option value=\\\"diamond\\\">Diamond</option>\\r\\n                                                                <option value=\\\"triangle\\\">Triangle</option>\\r\\n                                                                <option value=\\\"triangle-down\\\">Triangle-down</option>\\r\\n                                                            </select>\\r\\n                                                        </span>\\r\\n                                                    </div>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                            <br clear=\\\"all\\\"/>\\r\\n                                            <div>\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">Legend Label:</label>\\r\\n                                                    <div><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"curveLabel\\\" [(ngModel)]=\\\"hydrographs[i].curveLabel\\\" (keyup)=\\\"updateCurveLabel(i)\\\" /></div>\\r\\n                                                </div>\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">\\r\\n                                                        <input type=\\\"checkbox\\\" name=\\\"dataLabels\\\" (change)=\\\"updateDataLabels(i, $event.target.checked)\\\" [(ngModel)]=\\\"hydrographs[i].dataLabels\\\"/> Show Data Values\\r\\n                                                    </label>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                        </div> <!-- end curves-->\\r\\n                                    </div> <!-- end panel-body -->\\r\\n                                </div>\\r\\n                                <br clear=\\\"all\\\" />\\r\\n                            </form>\\r\\n                        </div><!-- end form for inputs-->\\r\\n                    </div> <!-- end for each hydroChartsArray loop -->\\r\\n                </div>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"fChartOptions\\\">\\r\\n                <div *ngIf=\\\"hydroChartsArray.length == 0\\\">\\r\\n                    <!-- show show/hide button only if there are no hydrographs above it (because that has the button also)-->\\r\\n                    <h2 style=\\\"display:inline-block;margin-right:42px;\\\">Charts</h2>\\r\\n                    <button class=\\\"hidden-print\\\" style=\\\"display:inline-block;\\\" type=\\\"button\\\" (click)=\\\"showHideCharts()\\\">{{showChartBtn_txt}}</button>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-xs-11\\\" *ngIf=\\\"showCharts_btn\\\">\\r\\n                        <div style=\\\"border:solid gray 1px;display:inline-block;margin-bottom:5px;\\\">\\r\\n                            <button type=\\\"button\\\" class=\\\"pull-right hidden-print\\\" (click)=\\\"removeFreqChart()\\\">x</button><br clear=\\\"all\\\" />\\r\\n                            <chart (load)=\\\"saveFreqInstance($event.context)\\\" [options]=\\\"fChartOptions\\\"></chart>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-xs-5 pull-right\\\">\\r\\n                            <br clear=\\\"all\\\" />\\r\\n                            <div class=\\\"pull-right hidden-print\\\"><a (click)=\\\"showHideAddFChartSettings()\\\" style=\\\"cursor: pointer\\\">More options</a></div>\\r\\n                            <br clear=\\\"all\\\" />\\r\\n                            <div *ngIf=\\\"showExtraFREQSettings\\\" [hidden]=\\\"!showExtraFREQSettings\\\" class=\\\"panel panel-default hidden-print\\\">\\r\\n                                <div class=\\\"panel-body\\\">\\r\\n                                    <form id=\\\"myFChartForm\\\" name=\\\"myFChartForm\\\" #myFChartForm=\\\"ngForm\\\">\\r\\n                                        <div style=\\\"font-size: small\\\">\\r\\n                                            <span>* To zoom in, click and drag a box in the chart</span>\\r\\n                                        </div>\\r\\n                                        <!-- AXIS -->\\r\\n                                        <div>\\r\\n                                            <div style=\\\"font-size: large\\\">Axes</div>\\r\\n                                            <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                <label class=\\\"control-label\\\">Choose Axis to update:</label>\\r\\n                                                <div>\\r\\n                                                    <span style=\\\"padding-right: 10px\\\">\\r\\n                                                        <input type=\\\"radio\\\"  name=\\\"Faxis\\\" [(ngModel)]=\\\"frequencyPlotChart.Faxis\\\" value=\\\"BottomX\\\" (click)=\\\"Faxis='BottomX'\\\" />Bottom X\\r\\n                                                    </span>\\r\\n                                                    <span>\\r\\n                                                        <input type=\\\"radio\\\" name=\\\"Faxis\\\" [(ngModel)]=\\\"frequencyPlotChart.Faxis\\\" value=\\\"LeftY\\\" (click)=\\\"Faxis='LeftY'\\\" />Left Y\\r\\n                                                    </span>\\r\\n                                                </div>\\r\\n                                            </div> <!-- end (AXIS) form group  -->\\r\\n                                            <!-- TYPE -->\\r\\n                                            <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                <label class=\\\"control-label\\\" [hidden]=\\\"frequencyPlotChart.Faxis != 'BottomX'\\\">Type:</label>\\r\\n                                                <div [hidden]=\\\"frequencyPlotChart.Faxis != 'BottomX'\\\">\\r\\n                                                    <span>\\r\\n                                                        <input type=\\\"radio\\\" name=\\\"type_BX\\\" [(ngModel)]=\\\"frequencyPlotChart.type_BX\\\" (click)=\\\"setFreqXaxisType('returnPeriod')\\\" value=\\\"returnPeriod\\\" />Return Period\\r\\n                                                    </span><br/>\\r\\n                                                    <span style=\\\"padding-right: 10px\\\">\\r\\n                                                        <input type=\\\"radio\\\" name=\\\"type_BX\\\" [(ngModel)]=\\\"frequencyPlotChart.type_BX\\\" (click)=\\\"setFreqXaxisType('percent')\\\" value=\\\"percent\\\" />Percent\\r\\n                                                    </span>\\r\\n                                                    <span>\\r\\n                                                        <input type=\\\"radio\\\" name=\\\"type_BX\\\" [(ngModel)]=\\\"frequencyPlotChart.type_BX\\\" (click)=\\\"setFreqXaxisType('fraction')\\\" value=\\\"fraction\\\" />Fraction\\r\\n                                                    </span>\\r\\n\\r\\n                                                </div>\\r\\n                                            </div> <!-- end (TYPE) form group -->\\r\\n                                            <!-- TITLE -->\\r\\n                                            <div class=\\\"form-group  col-xs-12\\\">\\r\\n                                                <label class=\\\"control-label\\\">Axis Title:</label>\\r\\n                                                <div [hidden]=\\\"frequencyPlotChart.Faxis != 'BottomX'\\\">\\r\\n                                                    <textarea cols=\\\"60\\\" rows=\\\"4\\\" class=\\\"form-control\\\" [innerHTML]=\\\"frequencyPlotChart.title_BX\\\" name=\\\"title_BX\\\" (keyup)=\\\"updateFreqBXtitle()\\\" [(ngModel)]=\\\"frequencyPlotChart.title_BX\\\"></textarea>\\r\\n                                                </div>\\r\\n                                                <div [hidden]=\\\"frequencyPlotChart.Faxis != 'LeftY'\\\">\\r\\n                                                    <textarea cols=\\\"60\\\" rows=\\\"4\\\" class=\\\"form-control\\\" [innerHTML]=\\\"frequencyPlotChart.title_LY\\\" name=\\\"title_LY\\\" (keyup)=\\\"updateFreqLYtitle()\\\"  [(ngModel)]=\\\"frequencyPlotChart.title_LY\\\"></textarea>\\r\\n                                                </div>\\r\\n                                            </div> <!-- end (TITLE) form group -->\\r\\n                                            <!-- MAJOR UNITS -->\\r\\n                                            <div class=\\\"form-group col-xs-4\\\">\\r\\n                                                <label class=\\\"control-label\\\">Major Units:</label>\\r\\n                                                <div [hidden]=\\\"frequencyPlotChart.Faxis != 'BottomX'\\\">\\r\\n                                                    <span style=\\\"padding-right: 10px\\\"><input type=\\\"checkbox\\\" name=\\\"majorGrid_BX\\\" (change)=\\\"setFreqXChartLines('gridLineWidth', $event.target.checked)\\\" [(ngModel)]=\\\"frequencyPlotChart.majorGrid_BX\\\" /> grid</span>\\r\\n                                                    <span><input type=\\\"checkbox\\\" name=\\\"majorTic_BX\\\" (change)=\\\"setFreqXChartLines('tickWidth', $event.target.checked)\\\" [(ngModel)]=\\\"frequencyPlotChart.majorTic_BX\\\"  /> tics</span>\\r\\n                                                </div>\\r\\n                                                <div [hidden]=\\\"frequencyPlotChart.Faxis != 'LeftY'\\\">\\r\\n                                                    <span style=\\\"padding-right: 10px\\\"><input type=\\\"checkbox\\\" name=\\\"majorGrid_LY\\\" (change)=\\\"setFreqYChartLines('gridLineWidth', $event.target.checked)\\\" [(ngModel)]=\\\"frequencyPlotChart.majorGrid_LY\\\" /> grid</span>\\r\\n                                                    <span><input type=\\\"checkbox\\\" name=\\\"majorTic_LY\\\" (change)=\\\"setFreqYChartLines('tickWidth', $event.target.checked)\\\" [(ngModel)]=\\\"frequencyPlotChart.majorTic_LY\\\" /> tics</span>\\r\\n                                                </div>\\r\\n                                            </div> <!-- end (MAJOR UNITS) form group -->\\r\\n\\r\\n                                            <!-- MINOR UNITS -->\\r\\n                                            <div class=\\\"form-group col-xs-4\\\">\\r\\n                                                <label class=\\\"control-label\\\">Minor Units:</label>\\r\\n                                                <div [hidden]=\\\"frequencyPlotChart.Faxis != 'BottomX'\\\">\\r\\n                                                    <span style=\\\"padding-right: 10px\\\">\\r\\n                                                        <input type=\\\"checkbox\\\" name=\\\"minorGrid_BX\\\" (change)=\\\"setFreqXChartLines('minorGridLineWidth', $event.target.checked)\\\" [(ngModel)]=\\\"frequencyPlotChart.minorGrid_BX\\\"/> grid\\r\\n                                                    </span>\\r\\n                                                    <span style=\\\"padding-right:5px\\\">\\r\\n                                                        <input type=\\\"checkbox\\\" name=\\\"minorTic_BX\\\" (change)=\\\"setFreqXChartLines('minorTickWidth', $event.target.checked)\\\" [(ngModel)]=\\\"frequencyPlotChart.minorTic_BX\\\" /> tics\\r\\n                                                    </span>\\r\\n                                                </div>\\r\\n\\r\\n                                                <div [hidden]=\\\"frequencyPlotChart.Faxis != 'LeftY'\\\">\\r\\n                                                    <span style=\\\"padding-right: 10px\\\">\\r\\n                                                        <input [disabled]=\\\"'true'\\\" type=\\\"checkbox\\\" name=\\\"minorGrid_LY\\\" [(ngModel)]=\\\"frequencyPlotChart.minorGrid_LY\\\" /> grid\\r\\n                                                    </span>\\r\\n                                                    <span style=\\\"padding-right:5px\\\">\\r\\n                                                        <input [disabled]=\\\"'true'\\\" type=\\\"checkbox\\\" name=\\\"minorTic_LY\\\" [(ngModel)]=\\\"frequencyPlotChart.minorTic_LY\\\" /> tics\\r\\n                                                    </span>\\r\\n                                                    <span style=\\\"font-size: x-small;font-weight: bold\\\">(Disabled with Log)</span>\\r\\n                                                </div>\\r\\n                                            </div> <!-- end (MINOR UNITS) form group -->\\r\\n                                            <div class=\\\"form-group col-xs-4\\\">\\r\\n                                                <label class=\\\"control-label\\\">\\r\\n                                                    <div [hidden]=\\\"frequencyPlotChart.Faxis != 'BottomX'\\\">\\r\\n                                                        <span><input type=\\\"checkbox\\\" name=\\\"reverse_BX\\\" (change)=\\\"setFreqReverseData('bx', $event.target.checked)\\\" [(ngModel)]=\\\"frequencyPlotChart.reverse_BX\\\"/> reverse</span>\\r\\n                                                    </div>\\r\\n                                                    <div [hidden]=\\\"frequencyPlotChart.Faxis != 'LeftY'\\\">\\r\\n                                                        <span><input type=\\\"checkbox\\\" name=\\\"reverse_LY\\\" (change)=\\\"setFreqReverseData('ly', $event.target.checked)\\\" [(ngModel)]=\\\"frequencyPlotChart.reverse_LY\\\"/> reverse</span>\\r\\n                                                    </div>\\r\\n                                                </label>\\r\\n                                            </div>\\r\\n                                        </div><!-- end Axes -->\\r\\n                                        <br clear=\\\"all\\\"/>\\r\\n                                        <div>\\r\\n                                            <div style=\\\"font-size: large\\\">Curves and Legend</div>\\r\\n                                            <div>\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">Curve Color:</label>\\r\\n                                                    <div><input [colorPicker]=\\\"frequencyPlotChart.colorPickerColor\\\" (colorPickerChange)=\\\"changeFreqLineColor($event)\\\" [style.background]=\\\"frequencyPlotChart.colorPickerColor\\\" [value]=\\\"frequencyPlotChart.colorPickerColor\\\"/></div>\\r\\n                                                </div>\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">Curve Width:</label>\\r\\n                                                    <div><input type=\\\"text\\\" name=\\\"lineWidth\\\" (keyup)=\\\"setFreqLineWidth()\\\" [(ngModel)]=\\\"frequencyPlotChart.lineWidth\\\"/></div>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                            <div>\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">Line Symbol Color:</label>\\r\\n                                                    <div><input [colorPicker]=\\\"frequencyPlotChart.lineSymbolFillColor\\\" (colorPickerChange)=\\\"changeFreqLineSymbolColor($event)\\\" [style.background]=\\\"frequencyPlotChart.lineSymbolFillColor\\\" [value]=\\\"frequencyPlotChart.lineSymbolFillColor\\\"/></div>\\r\\n                                                </div>\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">Point Symbol:</label>\\r\\n                                                    <div>\\r\\n                                                        <span class=\\\"select-wim\\\">\\r\\n                                                            <select [(ngModel)]=\\\"frequencyPlotChart.lineSymbol\\\" (ngModelChange)=\\\"setFreqLineSymbol($event)\\\" name=\\\"lineSymbol\\\">\\r\\n                                                                <option value=\\\"circle\\\">Circle</option>\\r\\n                                                                <option value=\\\"square\\\">Square</option>\\r\\n                                                                <option value=\\\"diamond\\\">Diamond</option>\\r\\n                                                                <option value=\\\"triangle\\\">Triangle</option>\\r\\n                                                                <option value=\\\"triangle-down\\\">Triangle-down</option>\\r\\n                                                            </select>\\r\\n                                                        </span>\\r\\n                                                    </div>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                            <br clear=\\\"all\\\"/>\\r\\n                                            <div>\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">Legend Label:</label>\\r\\n                                                    <div><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"curveLabel\\\" [(ngModel)]=\\\"frequencyPlotChart.curveLabel\\\" (keyup)=\\\"updateFreqCurveLabel()\\\" /></div>\\r\\n                                                </div>\\r\\n                                                <div class=\\\"form-group col-xs-6\\\">\\r\\n                                                    <label class=\\\"control-label\\\">\\r\\n                                                        <input type=\\\"checkbox\\\" name=\\\"dataLabels\\\" (change)=\\\"updateFreqDataLabels($event.target.checked)\\\" [(ngModel)]=\\\"frequencyPlotChart.dataLabels\\\"/> Show Data Values\\r\\n                                                    </label>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                        </div> <!-- end curves-->\\r\\n                                    </form>\\r\\n                                </div> <!-- end panel-body -->\\r\\n                            </div>\\r\\n                            <br clear=\\\"all\\\" />\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <br clear=\\\"all\\\"/>\\r\\n\\r\\n        <!-- appendix section for equation -->\\r\\n        <a class=\\\"hidden-print\\\" (click)=\\\"exportAppendix()\\\" style=\\\"cursor: pointer\\\"><span class=\\\"glyphicon glyphicon-download-alt\\\"></span></a>\\r\\n        <h2 style=\\\"margin:0;padding:0\\\" id=\\\"appendix\\\">Appendix</h2>\\r\\n\\r\\n        <h4>Equations</h4>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div *ngFor=\\\"let e of equationResults\\\" class=\\\"col-xs-10\\\">\\r\\n            <table style=\\\"border:solid 1px gray\\\" class=\\\"table\\\">\\r\\n                    <tr><td colspan=\\\"2\\\">{{e.Name}}</td><tr>\\r\\n                    <tr *ngFor=\\\"let c of e.Formulas\\\">\\r\\n                        <td>{{c.Code}} = </td>\\r\\n                        <td><span [MathJax]=\\\"c.Equation\\\">{{c.Equation}}</span></td>\\r\\n                    </tr>\\r\\n            </table>\\r\\n            </div><!--End equations-->\\r\\n        </div>\\r\\n        <br clear=\\\"all\\\"/>\\r\\n\\r\\n        <h4>Parameter Definitions</h4>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xs-8\\\">\\r\\n                <table style=\\\"border:solid 1px gray\\\" class=\\\"table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th class=\\\"col-xs-3\\\">Name</th>\\r\\n                            <th class=\\\"col-xs-1\\\">Abbrev</th>\\r\\n                            <th class=\\\"col-xs-8\\\">Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr *ngFor=\\\"let p of uniqueParameters\\\">\\r\\n                            <td>{{p.Name}}</td>\\r\\n                            <td>{{p.Code}}</td>\\r\\n                            <td>{{p.Description}}</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n            </table>\\r\\n            </div>\\r\\n        </div>\\r\\n        <br clear=\\\"all\\\"/>\\r\\n        <h4>Unit Types</h4>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xs-8\\\">\\r\\n                <table style=\\\"border:solid 1px gray\\\" class=\\\"table\\\">\\r\\n                    <thead><tr>\\r\\n                            <th class=\\\"col-xs-1\\\">Abbrev</th>\\r\\n                            <th class=\\\"col-xs-8\\\">Unit</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr *ngFor=\\\"let u of uniqueUnitTypes\\\">\\r\\n                            <td>(<span [innerHTML]=\\\"setSuperScript(u.Abbr)\\\"></span>)</td>\\r\\n                            <td>{{u.Unit}}</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n        </div>\\r\\n        <br clear=\\\"all\\\"/>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-wim-primary hidden-print\\\" (click)=\\\"printPage()\\\">Print Report</button>\\r\\n        <br/><br/><br/>\\r\\n    </div><!-- end results back -->\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/mainview/mainview.component.html\n// module id = 206\n// module chunks = 1","module.exports = \"<!--<nav class=\\\"main hidden-print\\\">\\r\\n    <div class=\\\"btn sidebar-toggle visible-sm visible-xs\\\">\\r\\n        <i class=\\\"fa fa-bars fa-2x\\\" (click)=\\\"toggleSidebar()\\\"></i>\\r\\n    </div>\\r\\n    <a class=\\\"navbar-brand\\\" href=\\\"http://www.usgs.gov\\\"><img src=\\\"assets/img/usgs-logo.png\\\"></a>\\r\\n    <span class=\\\"app-name\\\">{{title}}</span>\\r\\n</nav>-->\\r\\n<nav class=\\\"wim-nav\\\">\\r\\n    <div class=\\\"container\\\" style=\\\"width: 100%;\\\">\\r\\n        <button class=\\\"mobile-nav-toggle\\\" (click)=\\\"toggleSidebar()\\\"></button>\\r\\n        <a href=\\\"https://usgs.gov\\\" class=\\\"nav-branding\\\">\\r\\n            <img src=\\\"https://wim.usgs.gov/website-assets/usgs-logo.png\\\" />\\r\\n        </a>\\r\\n        <span class=\\\"nav-title\\\">\\r\\n            {{title}}\\r\\n        </span>\\r\\n        <div class=\\\"nav-links\\\">\\r\\n            <!--<a href=\\\"/#/\\\"><span><i class=\\\"ion-plus-round\\\"></i> New Site</span></a>\\r\\n            <a href=\\\"/#/\\\"><span><i class=\\\"ion-ios-book\\\"></i> Guide</span></a>\\r\\n            <a href=\\\"/#/\\\"><span><i class=\\\"ion-help\\\"></i> FAQ</span></a>-->\\r\\n        </div>\\r\\n    </div>\\r\\n</nav>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/navbar/navbar.component.html\n// module id = 207\n// module chunks = 1","module.exports = \"<form class=\\\"wim-sidebar fixed\\\">\\r\\n\\r\\n    <div class=\\\"sidebar-item\\\">\\r\\n        <label>Choose Region:</label>\\r\\n        <select [ngModel]=\\\"selectedRegion\\\" (ngModelChange)=\\\"onRegSelect($event)\\\" name=\\\"region\\\">\\r\\n            <option [ngValue]=\\\"i\\\" *ngFor=\\\"let i of regions\\\">{{i.Name}}</option>\\r\\n        </select>\\r\\n    </div>  <!-- end sidebar-item-->\\r\\n    \\r\\n\\r\\n    <div class=\\\"sidebar-item\\\" *ngIf=\\\"statisticGroups\\\">\\r\\n        <label>Limit by Statistic Group(s):</label>\\r\\n        <ss-multiselect-dropdown [options]=\\\"statisticGroups\\\" [texts]=\\\"myMSTexts\\\" [settings]=\\\"myRTSettings\\\" name=\\\"selectedStatGrpIDs\\\"\\r\\n                [(ngModel)]=\\\"selectedStatGrpIDs\\\" (ngModelChange)=\\\"onStatGrpSelect($event)\\\">\\r\\n        </ss-multiselect-dropdown>\\r\\n    </div>  <!-- end sidebar-item-->\\r\\n\\r\\n\\r\\n    <div class=\\\"sidebar-item\\\" *ngIf=\\\"regressionRegions\\\">\\r\\n        <label>Limit by Regression Group(s):</label>\\r\\n        <ss-multiselect-dropdown [options]=\\\"regressionRegions\\\" [texts]=\\\"myMSTexts\\\" [settings]=\\\"myRRSettings\\\" name=\\\"selectedRegRegionIDs\\\"\\r\\n                    [(ngModel)]=\\\"selectedRegRegionIDs\\\" (ngModelChange)=\\\"onRegressionRegSelect($event)\\\">\\r\\n        </ss-multiselect-dropdown>\\r\\n    </div>   <!-- end sidebar-item-->        \\r\\n\\r\\n\\r\\n    <div class=\\\"sidebar-item\\\" *ngIf=\\\"regressionTypes\\\">\\r\\n        <label>Limit by Statistic:</label>\\r\\n        <ss-multiselect-dropdown [options]=\\\"regressionTypes\\\" [texts]=\\\"myMSTexts\\\" [settings]=\\\"mySGSettings\\\" name=\\\"selectedRegTypeIDs\\\"\\r\\n                    [(ngModel)]=\\\"selectedRegTypeIDs\\\" (ngModelChange)=\\\"onRegTypeSelect($event)\\\">\\r\\n        </ss-multiselect-dropdown>\\r\\n    </div>  <!-- end sidebar-item-->\\r\\n\\r\\n\\r\\n    <div class=\\\"sidebar-item\\\" *ngIf=\\\"scenarios && scenarios.length > 0 && scenarios[0].RegressionRegions.length > 0\\\">\\r\\n        <label>Calculate Statistic:</label>\\r\\n        <button style=\\\"margin-top: 6px\\\" [disabled]=\\\"scenarios[0].RegressionRegions[0].Results != undefined\\\" type=\\\"button\\\" class=\\\"btn-black\\\" (click)=\\\"CalculateScenario()\\\">Compute</button>\\r\\n    </div>  <!-- end sidebar-item-->\\r\\n\\r\\n    <div class=\\\"sidebar-item\\\" *ngIf=\\\"showChart\\\">\\r\\n        <label>Chart:</label>\\r\\n        <ul>\\r\\n            <li *ngFor=\\\"let pt of plotTypes\\\" (click)=\\\"selectChart(pt)\\\" style=\\\"list-style:none;cursor:pointer;\\\">{{pt}}</li>\\r\\n        </ul>                \\r\\n    </div>   <!-- end sidebar-item-->\\r\\n\\r\\n    <div class=\\\"sidebar-item\\\" *ngIf=\\\"scenarios && scenarios.length > 0 && scenarios[0].RegressionRegions.length > 0 && scenarios[0].RegressionRegions[0].Results != undefined\\\">\\r\\n        <label>Go To:</label>\\r\\n        <ul>                \\r\\n            <li style=\\\"list-style:none\\\"><a pageScroll href=\\\"#citations\\\">Citations</a></li>\\r\\n            <li *ngIf=\\\"showChart\\\" style=\\\"list-style:none\\\"><a pageScroll href=\\\"#chart\\\">charts</a></li>\\r\\n            <li style=\\\"list-style:none\\\"><a pageScroll href=\\\"#appendix\\\">appendix</a></li>\\r\\n        </ul>            \\r\\n    </div>    <!-- end sidebar-item-->\\r\\n   <div class=\\\"identification pull-right\\\">powered by <a href=\\\"https://wim.usgs.gov/\\\" target=\\\"_blank\\\">WiM</a></div>\\r\\n\\r\\n\\r\\n</form>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/sidebar/sidebar.component.html\n// module id = 208\n// module chunks = 1","import { Injectable } from '@angular/core';\r\n\r\nimport { Http, Response, Headers, RequestOptions, URLSearchParams } from '@angular/http';\r\nimport { Observable }   from 'rxjs/Observable';\r\nimport { Subject }      from 'rxjs/Subject';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\n\r\n\r\n//interfaces\r\nimport { Region }              from './shared/interfaces/region';\r\nimport { Regressionregion }    from './shared/interfaces/regressionregion';\r\nimport { Statisticgroup }      from './shared/interfaces/statisticgroup';\r\nimport { Regressiontype }      from './shared/interfaces/regressiontype';\r\nimport { Scenario }            from './shared/interfaces/scenario';\r\nimport { Citation }            from './shared/interfaces/citation';\r\nimport { Hydrochart }          from './shared/interfaces/hydrochart';\r\nimport { Config }              from './shared/interfaces/config';\r\nimport { ConfigService }       from './config.service';\r\nimport { Toast }               from 'angular2-toaster/src/toast';\r\n\r\n@Injectable()\r\nexport class NSSService {\r\n  //updated whenever selected values are updated - used for getting other parts \r\n    private _regRegionIdParams: string;\r\n    private _regTypeIdParams: string;\r\n    private _statGrpIdParams: string;\r\n    private configSettings: Config;\r\n    private jsonHeader: Headers = new Headers({\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"});\r\n\r\n    constructor(private _http: Http, private _configService: ConfigService) {\r\n        this.configSettings = this._configService.getConfiguration();\r\n        this.getRegions();    \r\n    }\r\n\r\n    // -+-+-+-+-+-+-+-+-+ hydrograph  getter/setter  -+-+-+-+-+-+-+-+-+\r\n    private hydrograph: Hydrochart;\r\n    private hydroBind: Subject<Hydrochart> = new Subject<Hydrochart>();\r\n    setHydrograph(h: Hydrochart) {\r\n        this.hydrograph = h;\r\n        this.hydroBind.next(h);\r\n    }\r\n    getHydrograph(): Observable<Hydrochart> {\r\n        return this.hydroBind.asObservable();\r\n    }\r\n    private chartBind: Subject<string> = new Subject<string>();\r\n    addChart(c: string) {\r\n        this.chartBind.next(c);\r\n    }\r\n    getChart():Observable<string> {\r\n        return this.chartBind.asObservable();\r\n    }\r\n    \r\n    // -+-+-+-+-+-+-+-+-+ frequency  getter/setter  -+-+-+-+-+-+-+-+-+\r\n    private frequency: string;\r\n    private freqBind: Subject<string> = new Subject<string>();\r\n    setFrequency() {\r\n        this.frequency = \"newOne\";\r\n        this.freqBind.next(\"newOne\");\r\n    }\r\n    getFrequency(): Observable<string> {\r\n        return this.freqBind.asObservable();\r\n    }\r\n\r\n    // -+-+-+-+-+-+-+-+-+ toaster  getter/setter  -+-+-+-+-+-+-+-+-+\r\n    private toast: Toast;\r\n    private toastBind: Subject<Toast> = new Subject<Toast>();    \r\n    public showToast(t: Toast) {\r\n        this.toast = t;\r\n        this.toastBind.next(t);\r\n    }\r\n    public getToast(): Observable<Toast> {\r\n        return this.toastBind.asObservable();\r\n    }\r\n\r\n    // -+-+-+-+-+-+ region section -+-+-+-+-+-+-+\r\n    private _regionSubject: Subject<Array<Region>> = new Subject<Array<Region>>(); //array of regions that sidebar and mainview use\r\n    private _selectedRegion: Region; //selectedregion \r\n\r\n    public get regions(): Observable<Array<Region>> {\r\n        //getter (regions)\r\n        return this._regionSubject.asObservable();\r\n    }\r\n    \r\n    //setter (selectedRegion)\r\n    public set selectedRegion(v: Region) {\r\n        if (v == this._selectedRegion) return\r\n        this._selectedRegion = v;\r\n        this._selectedRegRegions = [];\r\n        this._selectedStatGroups = [];\r\n        this._selectedRegressionTypes = [];\r\n        this.chartBind.next(\"\");\r\n        //go get all the other stuff (regressionregions, regressiontypes,statisticgroups and scenarios\r\n        this.initializeRegion();\r\n    };\r\n    //getter (selectedRegion)\r\n    public get selectedRegion(): Region{\r\n        return this._selectedRegion;\r\n    };\r\n    //get all regions\r\n    private getRegions():void {\r\n    let options = new RequestOptions({headers: this.jsonHeader});\r\n    this._http.get(this.configSettings.baseURL + this.configSettings.regionURL, options)\r\n        .map(res=> <Array<Region>>res.json()).subscribe(r=>{\r\n        this._regionSubject.next(r);\r\n        }, error => this.handleError);   \r\n    }\r\n    // -+-+-+-+-+-+ end region section -+-+-+-+-+-+-+\r\n\r\n    // -+-+-+-+-+-+ regressionregion -+-+-+-+-+-+-+\r\n    private _regressionRegionSubject: Subject<Array<Regressionregion>> = new Subject<Array<Regressionregion>>();\r\n    public get regressionRegions(): Observable<Array<Regressionregion>> {\r\n        return this._regressionRegionSubject.asObservable();\r\n    }\r\n\r\n    private _selectedRegRegions: Array<Regressionregion>;   \r\n    //setter (selectedRegion)\r\n    public set selectedRegRegions(v: Array<Regressionregion>) {\r\n        this.chartBind.next(\"\");\r\n        if (v.length > 0) {\r\n            this._selectedRegRegions = v;\r\n            let srr: Array<number> = [];\r\n            this._selectedRegRegions.forEach((rr) => {\r\n                srr.push(rr.ID);\r\n            });\r\n            //now update statisticGroups, regressionTypes if there are selectedRegRegions\r\n            this._regRegionIdParams = srr.length >= 0 ? srr.join(\",\") : '';            \r\n\r\n            //params for regressionTypes and statisticGroups\r\n            let regTypeParams: URLSearchParams = new URLSearchParams();\r\n            regTypeParams.set('regressionregions', this._regRegionIdParams);\r\n            regTypeParams.set('statisticgroups', this._statGrpIdParams);\r\n            this.getRegionRegressionTypes(this.selectedRegion.ID, regTypeParams).subscribe(rt => {\r\n                //format all reg type stuff\r\n                this.formatRegTypeStuff(rt);\r\n\r\n                //params for statistic groups\r\n                let statGrpParams: URLSearchParams = new URLSearchParams();\r\n                statGrpParams.set('regressionregions', this._regRegionIdParams);\r\n                statGrpParams.set('regressiontypes', this._regTypeIdParams);\r\n                this.getRegionStatisticGrps(this.selectedRegion.ID, statGrpParams).subscribe(sg => {\r\n                    this.formatStatisticGrpStuff(sg);\r\n                \r\n                    //params for scenarios\r\n                    let scenarioParams: URLSearchParams = new URLSearchParams();\r\n                    scenarioParams.set('regressionregions', this._regRegionIdParams);\r\n                    scenarioParams.set('regressiontypes', this._regTypeIdParams);   \r\n                    scenarioParams.set('statisticgroups', this._statGrpIdParams);\r\n                    scenarioParams.set('unitsystems', '2');\r\n                    this.getRegionScenario(this.selectedRegion.ID, scenarioParams) //get scenarios \r\n                }, error => this.handleError);   //get StatisticGroups\r\n            }, error => this.handleError); //get regressionRegions                       \r\n        }//v.lenght > 0\r\n        else {\r\n            //they cleared it\r\n            this._selectedRegRegions = [];\r\n            //now update statisticGroups, regressionTypes if there are selectedRegRegions\r\n            let regTypeParams: URLSearchParams = new URLSearchParams();\r\n            regTypeParams.set('statisticgroups', this._statGrpIdParams);\r\n            this.getRegionRegressionTypes(this.selectedRegion.ID, regTypeParams).subscribe(rt=> {\r\n                this.formatRegTypeStuff(rt);\r\n\r\n                //params for statistic groups\r\n                let statGrpParams: URLSearchParams = new URLSearchParams();\r\n                statGrpParams.set('regressiontypes', this._regTypeIdParams);\r\n                this.getRegionStatisticGrps(this.selectedRegion.ID, statGrpParams).subscribe(sg => {\r\n                    this.formatStatisticGrpStuff(sg);\r\n\r\n                    //params for scenarios\r\n                    let scenarioParams: URLSearchParams = new URLSearchParams();\r\n                    scenarioParams.set('regressiontypes', this._regTypeIdParams);\r\n                    scenarioParams.set('statisticgroups', this._statGrpIdParams);\r\n                    scenarioParams.set('unitsystems', '2');\r\n                    this.getRegionScenario(this.selectedRegion.ID, scenarioParams); //get scenarios\r\n                }, error => this.handleError);   //get StatisticGroups            \r\n            }, error => this.handleError); //get RegressionTypes\r\n        }        \r\n    };\r\n    //getter (selectedRegRegion)\r\n    public get selectedRegRegions(): Array<Regressionregion> {\r\n        return this._selectedRegRegions;\r\n    };\r\n    //once http.get.map is done.. the .subcribe calls this function to get everything formatted\r\n    private formatRegRegionStuff(rr:Array<Regressionregion>){\r\n        rr.forEach((r) => {\r\n            r.id = r.ID; r.name = r.Name;\r\n        });\r\n        //remove from _selectedRegRegions if not in response.\r\n        if (this._selectedRegRegions != undefined) {\r\n            for (var srr = this._selectedRegRegions.length; srr--;) {\r\n                let RRSind = rr.map(function (eachrr) { return eachrr.ID; }).indexOf(this._selectedRegRegions[srr].ID);\r\n                if (RRSind < 0)\r\n                    this._selectedRegRegions.splice(srr, 1);\r\n            };\r\n            //repopulate param string comma sep IDs\r\n            let regRegIDarray: Array<number> = new Array<number>();\r\n            this._selectedRegRegions.forEach((rt) => {\r\n                regRegIDarray.push(rt.ID); //pushing each ID into arrayof numbers to then join as comma sep string for parameters\r\n            });\r\n            this._regRegionIdParams = regRegIDarray.length >= 0 ? regRegIDarray.join(\",\") : '';\r\n        };\r\n        this._regressionRegionSubject.next(rr);\r\n    }\r\n    // -+-+-+-+-+-+ end regressionRegion section -+-+-+-+-+-+-+\r\n\r\n    // -+-+-+-+-+-+ statisticgroups section -+-+-+-+-+-+-+-+-+-+\r\n    private _statisticGroupSubject: Subject<Array<Statisticgroup>> = new Subject<Array<Statisticgroup>>();\r\n    public get statisticGroups(): Observable<Array<Statisticgroup>> {\r\n        return this._statisticGroupSubject.asObservable();\r\n    }\r\n\r\n    private _selectedStatGroups: Array<Statisticgroup>;\r\n    //setter (selectedStatisticgroup)\r\n    public set selectedStatGroups(v: Array<Statisticgroup>) {\r\n        this.chartBind.next(\"\");\r\n        if (v.length > 0) {\r\n            this._selectedStatGroups = v;\r\n            let ssg: Array<number> = [];\r\n            this._selectedStatGroups.forEach((ss) => {\r\n                ssg.push(ss.ID);\r\n            });\r\n            //now update regressionRegions, regressionTypes if there are selectedStatisticGroups\r\n            this._statGrpIdParams = ssg.length >= 0 ? ssg.join(\",\") : '';\r\n\r\n            //params for regressionTypes\r\n            let regTypeParams: URLSearchParams = new URLSearchParams();\r\n            regTypeParams.set('regressionregions', this._regRegionIdParams);\r\n            regTypeParams.set('statisticgroups', this._statGrpIdParams);\r\n            this.getRegionRegressionTypes(this.selectedRegion.ID, regTypeParams).subscribe(rt => {\r\n                //format all reg type stuff\r\n                this.formatRegTypeStuff(rt);\r\n                \r\n                //params for regressionRegions\r\n                let regRegionParams: URLSearchParams = new URLSearchParams();\r\n                regRegionParams.set('statisticgroups', this._statGrpIdParams);\r\n                regRegionParams.set('regressiontypes', this._regTypeIdParams);\r\n                this.getRegionRegressionRegions(this.selectedRegion.ID, regRegionParams).subscribe(rr => {\r\n                    //format all reg regions stuff\r\n                    this.formatRegRegionStuff(rr);\r\n\r\n                    //params for scenarios\r\n                    let scenarioParams: URLSearchParams = new URLSearchParams();            \r\n                    scenarioParams.set('regressionregions', this._regRegionIdParams);\r\n                    scenarioParams.set('regressiontypes', this._regTypeIdParams);\r\n                    scenarioParams.set('statisticgroups', this._statGrpIdParams);\r\n                    scenarioParams.set('unitsystems', '2');\r\n                    this.getRegionScenario(this.selectedRegion.ID, scenarioParams); //get scenarios\r\n                }, error => this.handleError);  //getRegionRegressionRegions                      \r\n            }, error => this.handleError); //getRegionRegressionTypes\r\n        }//v.lenght > 0\r\n        else {\r\n            //they cleared it\r\n            this._selectedStatGroups = [];\r\n            //now update statisticGroups, regressionTypes if there are selectedRegRegions\r\n            let regTypeParams: URLSearchParams = new URLSearchParams();\r\n            regTypeParams.set('regressionregions', this._regRegionIdParams);\r\n            this.getRegionRegressionTypes(this.selectedRegion.ID, regTypeParams).subscribe(rt => {\r\n                //format all reg type stuff\r\n                this.formatRegTypeStuff(rt);\r\n                \r\n                //params for regressionRegions\r\n                let regRegionsParams: URLSearchParams = new URLSearchParams();\r\n                regRegionsParams.set('regressiontypes', this._regTypeIdParams);\r\n                this.getRegionRegressionRegions(this.selectedRegion.ID, regRegionsParams).subscribe(rr=>{\r\n                    //format all reg regions stuff\r\n                    this.formatRegRegionStuff(rr);\r\n\r\n                    //params for scenarios\r\n                    let scenarioParams: URLSearchParams = new URLSearchParams();\r\n                    scenarioParams.set('regressiontypes', this._regTypeIdParams);\r\n                    scenarioParams.set('regressionregions', this._regRegionIdParams);\r\n                    scenarioParams.set('unitsystems', '2');\r\n                    this.getRegionScenario(this.selectedRegion.ID, scenarioParams); //get scenarios\r\n                }, error => this.handleError);   //get getRegionRegressionRegions            \r\n            }, error => this.handleError); //get RegressionTypes           \r\n        }\r\n    };\r\n    //getter (selectedStatisticgroup)\r\n    public get selectedStatGroups(): Array<Statisticgroup> {\r\n        return this._selectedStatGroups;\r\n    };\r\n    //once http.get.map is done.. the .subcribe calls this function to get everything formatted\r\n    private formatStatisticGrpStuff(sg:Array<Statisticgroup>) {\r\n        sg.forEach((s) => {\r\n            s.id = s.ID; s.name = s.Name;                    \r\n        });\r\n        //remove from _selectedStatGroups if not in response.\r\n        if (this._selectedStatGroups != undefined) {\r\n            for (var si = this._selectedStatGroups.length; si--;) {\r\n                let SSind = sg.map(function (eachsg) { return eachsg.ID; }).indexOf(this._selectedStatGroups[si].ID);\r\n                if (SSind < 0)\r\n                    this._selectedStatGroups.splice(si, 1);\r\n            };\r\n            //repopulate param string comma sep IDs\r\n            let statGrpIDarray: Array<number> = new Array<number>();\r\n            this._selectedStatGroups.forEach((rt) => {\r\n                statGrpIDarray.push(rt.ID); //pushing each ID into arrayof numbers to then join as comma sep string for parameters\r\n            });                    \r\n            this._statGrpIdParams = statGrpIDarray.length >= 0 ? statGrpIDarray.join(\",\") : '';\r\n        };\r\n        this._statisticGroupSubject.next(sg);\r\n    }\r\n    // -+-+-+-+-+-+ end statisticgroups section -+-+-+-+-+-+-+-+-+-+\r\n\r\n    // -+-+-+-+-+-+ regressionTypes -+-+-+-+-+-+-+-+-+-+-+-+ \r\n    private _regressionTypeSubject: Subject<Array<Regressiontype>> = new Subject<Array<Regressiontype>>();\r\n    private _selectedRegressionTypes: Array<Regressiontype>;\r\n\r\n    public get regressionTypes(): Observable<Array<Regressiontype>> {\r\n        return this._regressionTypeSubject.asObservable();\r\n    }\r\n    //setter (selectedRegressionType)\r\n    public set selectedRegressionTypes(v: Array<Regressiontype>) {\r\n        this.chartBind.next(\"\");\r\n        if (v.length > 0) {\r\n            this._selectedRegressionTypes = v;\r\n            let srt: Array<number> = [];\r\n            this._selectedRegressionTypes.forEach((rt) => {\r\n                srt.push(rt.ID);\r\n            });\r\n            //now update regressionRegions, regressionTypes if there are selectedStatisticGroups\r\n            this._regTypeIdParams = srt.length >= 0 ? srt.join(\",\") : '';\r\n\r\n            let statGrpParams: URLSearchParams = new URLSearchParams();\r\n            statGrpParams.set('regressionregions', this._regRegionIdParams);\r\n            statGrpParams.set('regressiontypes', this._regTypeIdParams);\r\n            this.getRegionStatisticGrps(this.selectedRegion.ID, statGrpParams).subscribe(sg =>{\r\n                this.formatStatisticGrpStuff(sg);\r\n\r\n                //params for regRegions\r\n                let regRegionParams: URLSearchParams = new URLSearchParams();\r\n                regRegionParams.set('statisticgroups', this._statGrpIdParams);\r\n                regRegionParams.set('regressiontypes', this._regTypeIdParams);\r\n                this.getRegionRegressionRegions(this.selectedRegion.ID, regRegionParams).subscribe(rr=> {\r\n                    this.formatRegRegionStuff(rr);\r\n\r\n                    //params for scenarios\r\n                    let scenarioParams: URLSearchParams = new URLSearchParams();\r\n                    scenarioParams.set('regressionregions', this._regRegionIdParams);\r\n                    scenarioParams.set('regressiontypes', this._regTypeIdParams);\r\n                    scenarioParams.set('statisticgroups', this._statGrpIdParams);\r\n                    scenarioParams.set('unitsystems', '2');\r\n                    this.getRegionScenario(this.selectedRegion.ID, scenarioParams); //get scenarios\r\n                }, error => this.handleError);   //get regressionRegions\r\n            }, error => this.handleError); //get RegressionTypes\r\n        }//v.lenght > 0\r\n        else {\r\n            //they cleared it\r\n            this._selectedRegressionTypes = [];\r\n            //now update statisticGroups, regressionTypes if there are selectedRegRegions\r\n            let regTypeParams: URLSearchParams = new URLSearchParams();\r\n            regTypeParams.set('regressionregions', this._regRegionIdParams);\r\n            this.getRegionStatisticGrps(this.selectedRegion.ID, regTypeParams).subscribe(sg => {\r\n                this.formatStatisticGrpStuff(sg);\r\n\r\n                //params for reg regions\r\n                let regRegionsParams: URLSearchParams = new URLSearchParams();\r\n                regRegionsParams.set('statisticgroups', this._statGrpIdParams);\r\n                this.getRegionRegressionRegions(this.selectedRegion.ID, regRegionsParams).subscribe(rr => {\r\n                    this.formatRegRegionStuff(rr);\r\n\r\n                    //params for scenarios\r\n                    let scenarioParams: URLSearchParams = new URLSearchParams();\r\n                    scenarioParams.set('statisticgroups', this._statGrpIdParams);\r\n                    scenarioParams.set('regressionregions', this._regRegionIdParams);\r\n                    scenarioParams.set('unitsystems', '2');\r\n                    this.getRegionScenario(this.selectedRegion.ID, scenarioParams); //get scenarios\r\n                },error => this.handleError);   //get regressionregions\r\n            }, error => this.handleError); //get RegressionTypes\r\n        }\r\n    };\r\n    //getter (selectedRegressionType)\r\n    public get selectedRegressionTypes(): Array<Regressiontype> {\r\n        return this._selectedRegressionTypes;\r\n    };\r\n    //once http.get.map is done.. the .subcribe calls this function to get everything formatted\r\n    formatRegTypeStuff(rt:Array<Regressiontype>){\r\n        rt.forEach((r) => {\r\n            r.id = r.ID; r.name = r.Name;\r\n        });\r\n        //remove from _selectedStatGroups if not in response.\r\n        if (this._selectedRegressionTypes != undefined) {\r\n            for (var srt = this._selectedRegressionTypes.length; srt--;) {\r\n                let RTSind = rt.map(function (eachrt) { return eachrt.ID; }).indexOf(this._selectedRegressionTypes[srt].ID);\r\n                if (RTSind < 0)\r\n                    this._selectedRegressionTypes.splice(srt, 1);\r\n            };\r\n            //repopulate param string comma sep IDs\r\n            let regTypeIDarray: Array<number> = new Array<number>();\r\n            this._selectedRegressionTypes.forEach((rt) => {\r\n                regTypeIDarray.push(rt.ID); //pushing each ID into arrayof numbers to then join as comma sep string for parameters\r\n            });\r\n            this._regTypeIdParams = regTypeIDarray.length >= 0 ? regTypeIDarray.join(\",\") : '';\r\n        };\r\n        this._regressionTypeSubject.next(rt);                \r\n    }\r\n    // -+-+-+-+-+-+ end regressionTypes section -+-+-+-+-+-+-+-+-+-+\r\n\r\n    // -+-+-+-+-+-+ Scenarios section -+-+-+-+-+-+-+-+-+-+\r\n    private _scenarioSubject: Subject<Array<Scenario>> = new Subject<Array<Scenario>>();    \r\n    public get scenarios(): Observable<Array<Scenario>> {\r\n        return this._scenarioSubject.asObservable();\r\n    } \r\n    public setScenarios(s:Array<Scenario>){\r\n        this._scenarioSubject.next(s);\r\n        this.chartBind.next(\"\");\r\n    }  \r\n    // -+-+-+-+-+-+ end Scenarios section -+-+-+-+-+-+-+-+-+-+\r\n\r\n    //region has been selected, populate all other multiselects and get scenarios\r\n    private initializeRegion(): void {        \r\n        this.getRegionRegressionRegions(this.selectedRegion.ID).subscribe(rr => { this.formatRegRegionStuff(rr);}); //get RegressionRegions\r\n        this.getRegionStatisticGrps(this.selectedRegion.ID).subscribe(sg=> { this.formatStatisticGrpStuff(sg);}); //get StatisticGroups\r\n        this.getRegionRegressionTypes(this.selectedRegion.ID).subscribe(rt => {this.formatRegTypeStuff(rt);}); //get RegressionTypes\r\n        let scenarioParams: URLSearchParams = new URLSearchParams();\r\n        scenarioParams.set('unitsystems', '2');\r\n        this.getRegionScenario(this.selectedRegion.ID, scenarioParams); //get scenarios\r\n    }\r\n\r\n    // -+-+-+-+-+-+-+-+-+-+-+-+ http GETs -+-+-+-+-+-+-+-+-+-+-+-+\r\n    //get regressionRegions by region\r\n    private getRegionRegressionRegions(id: number, searchArgs?: URLSearchParams) {\r\n        let options = new RequestOptions({ headers: this.jsonHeader, search:searchArgs });\r\n         return this._http.get(this.configSettings.baseURL + this.configSettings.regionURL + '/' + id + '/regressionregions', options)\r\n            .map(res => <Array<Regressionregion>>res.json())      \r\n    }\r\n\r\n    //get regressiontypes by region\r\n    private getRegionRegressionTypes(id: number, searchArgs?: URLSearchParams) {\r\n        let options = new RequestOptions({ headers: this.jsonHeader, search: searchArgs });\r\n        return this._http.get(this.configSettings.baseURL + this.configSettings.regionURL + '/' + id + '/regressiontypes', options)\r\n            .map(res => <Regressiontype[]>res.json())          \r\n    }\r\n\r\n    //get statisticgroups by region\r\n    private getRegionStatisticGrps(id: number, searchArgs?: URLSearchParams) {\r\n        let options = new RequestOptions({ headers: this.jsonHeader, search: searchArgs });\r\n        return this._http.get(this.configSettings.baseURL + this.configSettings.regionURL + '/' + id + '/statisticgroups', options)\r\n            .map(res => <Statisticgroup[]>res.json())           \r\n    }\r\n\r\n    //get scenarios by region\r\n    private getRegionScenario(id: number, searchArgs?: URLSearchParams) {\r\n        let options = new RequestOptions({ headers: this.jsonHeader, search: searchArgs });\r\n        return this._http.get(this.configSettings.baseURL + this.configSettings.regionURL + '/' + id + '/scenarios', options)\r\n            .map(res => <Scenario[]>res.json())\r\n            .subscribe(s => {\r\n                s.forEach(scen => {\r\n                    //get citations\r\n                    let i = scen.Links[0].Href.indexOf('?');\r\n                    let param = scen.Links[0].Href.substring(i + 1);\r\n                    this.getCitations(new URLSearchParams(param)).subscribe(c => {\r\n                        scen.Citations = c;\r\n                    });\r\n                    //clear Parameter.'Value'\r\n                    scen.RegressionRegions.forEach((rr) => {\r\n                        rr.Parameters.forEach((p) => {\r\n                            p.Value = null;\r\n                        });\r\n                    });\r\n                });\r\n                this._scenarioSubject.next(s);\r\n            }, error => this.handleError);\r\n    }\r\n\r\n    //calculate Scenarios (POST)\r\n    postScenarios(id: number, s: Scenario[], searchArgs?: URLSearchParams) {\r\n        //let body = JSON.stringify(s);\r\n        let options = new RequestOptions({ headers: this.jsonHeader, search: searchArgs });\r\n\r\n        return this._http.post(this.configSettings.baseURL + this.configSettings.regionURL + '/' + id + '/scenarios/estimate', s, options)\r\n            .map(sResult => <Scenario[]>sResult.json())\r\n            .subscribe(sResult => {\r\n                sResult.forEach(scen => {\r\n                    if (scen.RegressionRegions.length > 0){\r\n                        //get citations\r\n                        let i = scen.Links[0].Href.indexOf('?');\r\n                        let param = scen.Links[0].Href.substring(i + 1);\r\n                        this.getCitations(new URLSearchParams(param)).subscribe(c => {\r\n                            scen.Citations = c;\r\n                        }, error => this.handleError);                    \r\n                    }      \r\n                });\r\n                this._scenarioSubject.next(sResult);\r\n            }, error => this.handleError);\r\n    }\r\n\r\n    private getCitations(searchArgs?: URLSearchParams) {\r\n        let options = new RequestOptions({ headers: this.jsonHeader, search: searchArgs });\r\n\r\n        return this._http.get(this.configSettings.baseURL + this.configSettings.citationURL, options)\r\n            .map(cit => <Citation[]>cit.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        // TODO figure out a better error handler\r\n        // in a real world app, we may send the server to some remote logging infrastructure\r\n        // instead of just logging it to the console\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || 'Server error');\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.service.ts","// ------------------------------------------------------------------------------\r\n// ----- config.service..ts -----------------------------------------------\r\n// ------------------------------------------------------------------------------\r\n\r\n// copyright:   2017 WiM - USGS\r\n// authors:  Tonia Roddick - USGS Wisconsin Internet Mapping\r\n// purpose: service to get configuration file\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Http, Headers, RequestOptions, Response, URLSearchParams } from '@angular/http';\r\nimport { Config } from \"app/shared/interfaces/config\";\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n   private config: Config;\r\n   constructor(private _http:Http) {}\r\n  \r\n    public load(url:string) { \r\n        return new Promise((resolve) => {\r\n            this._http.get(url).map(res=>res.json()).subscribe(config => {\r\n                    this.config = config;\r\n                    resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    public getConfiguration(): Config {\r\n        return this.config;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/config.service.ts","import { Component, OnInit, Inject, ViewChildren, ViewContainerRef } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\n\r\nimport { Region} from '../shared/interfaces/region';\r\nimport { Regressionregion } from '../shared/interfaces/regressionregion';\r\nimport { Regressiontype } from '../shared/interfaces/regressiontype';\r\nimport { Scenarioregressionregion } from '../shared/interfaces/scenarioregressionregion';\r\nimport { Statisticgroup } from '../shared/interfaces/statisticgroup';\r\nimport { Scenario } from '../shared/interfaces/scenario';\r\nimport { Parameter } from '../shared/interfaces/parameter';\r\nimport { Unittype } from '../shared/interfaces/unittype';\r\nimport { Limit } from '../shared/interfaces/limit';\r\nimport { Equationresults } from '../shared/interfaces/equationresults';\r\nimport { Hydrochart } from '../shared/interfaces/hydrochart';\r\nimport { Freqchart } from '../shared/interfaces/freqchart';\r\nimport { Chart } from '../shared/interfaces/chart';\r\nimport { NSSService} from '../app.service';\r\nimport { ToasterContainerComponent, ToasterService } from 'angular2-toaster/angular2-toaster';\r\nimport { Toast } from 'angular2-toaster/src/toast';\r\nimport { PageScrollService, PageScrollInstance } from 'ng2-page-scroll';\r\nimport * as Highcharts from 'highcharts';\r\n\r\ndeclare var MathJax: {\r\n    Hub: { Queue: (param: Object[]) => void; }\r\n}\r\n\r\n@Component({\r\n  selector: 'wim-mainview',\r\n  templateUrl: './mainview.component.html',\r\n  styleUrls: ['./mainview.component.css']\r\n})\r\nexport class MainviewComponent implements OnInit {\r\n  @ViewChildren('inputsTable', {read:ViewContainerRef}) inputTable;\r\n  @ViewChildren('resultsTable', {read:ViewContainerRef}) resultTable;\r\n  \r\n  public title:string;\r\n  public resultsBack: boolean;                //flag that swaps content on mainpage from scenarios w/o results to those with results\r\n  public equationResults: Equationresults[];  //used in Appendix\r\n  public showWeights: boolean;                //if more than 1 regRegion, then show input for weighted\r\n  public timestamp: Date;                     //display a time stamp when they first get here.\r\n  public toast: Toast;                        //notification when values are required\r\n  public get selectedRegion(): Region { return this._nssService.selectedRegion; };\r\n  public get selectedRegRegion(): Array<Regressionregion> { return this._nssService.selectedRegRegions; };\r\n  public get selectedStatisticGrp(): Array<Statisticgroup> { return this._nssService.selectedStatGroups; };\r\n  public get selectedRegType(): Array<Regressiontype> { return this._nssService.selectedRegressionTypes; };\r\n  public scenarios: Scenario[];              \r\n  // -+-+-+-+ Chart parts -+-+-+-+-+-+\r\n  public hydrographs: Array<Hydrochart>;              //holds all the IHydros so each chart has their own\r\n  public hydroChartsArray: Chart[];              //holds all hydro charts that are desired.\r\n  public hChartOptions: Chart;                   //hydro chart\r\n  public hChartXAxisValues: string[];             //holds Recurrence Interval dropdown values for chart\r\n  //public hChartYAxisText: string;               //chart y axis\r\n  public fChartOptions: any;                     //frequency chart\r\n  public fChartValues: Array<number>[];           //frequency data\r\n  public showCharts_btn: boolean;                 //toggle button boolean\r\n  public showChartBtn_txt: string;                //string \"show\" / \"hide\"\r\n  public selectedPlot: string;                    //which plot are they asking for (\"Hydrograph\" or \"Frequency Plot\")\r\n  public charts: Array<any>;                      //chart instance for hydroChartsArray\r\n  public freqChart:any;                           //chart instance for frequency plot\r\n  public uniqueParameters:Array<Parameter>       //holds unique list of parameters\r\n  public uniqueUnitTypes:Array<Unittype>         //holds unique list of unit types for parameters to show in appendix\r\n  public multipleRegRegions: boolean              //if multiple regRegions, set this to true\r\n  private DIMLESS_ARRAY = [\r\n      [0.25, 0.12], [0.3, 0.16], [0.35, 0.21], [0.4, 0.26], [0.45, 0.33], [0.5, 0.4], [0.55, 0.49], [0.6, 0.58], [0.65, 0.67], [0.7, 0.76], \r\n      [0.75, 0.84], [0.8, 0.9], [0.85, 0.95], [0.9, 0.98], [0.95, 1.00], [1.00, 0.99], [1.05, 0.96], [1.1, 0.92], [1.15, 0.86], [1.2, 0.8], \r\n      [1.25, 0.74], [1.3, 0.68], [1.35, 0.62], [1.4, 0.56], [1.45, 0.51], [1.5, 0.47], [1.55, 0.43], [1.6, 0.39],[1.65, 0.36], [1.7, 0.33], \r\n      [1.75, 0.3], [1.8, 0.28], [1.85, 0.26], [1.9, 0.24], [1.95, 0.22], [2.0, 0.2], [2.05, 0.19], [2.1, 0.17], [2.15, 0.16], [2.2, 0.15], \r\n      [2.25, 0.14], [2.3, 0.13], [2.35, 0.12], [2.4, 0.11] ];\r\n  public frequencyPlotChart: Freqchart;            //holder of the freq plot properties ()\r\n  public showExtraFREQSettings: boolean;            //showhide flag for additional settings on frequency plot\r\n  public resultsErrorLength: number;\r\n  public appendixEquationsforExport: Array<string>;\r\n  constructor(private _nssService:NSSService, \r\n              private _toasterService: ToasterService,\r\n              @Inject(DOCUMENT) private _document:any,\r\n              private _pageScrollService: PageScrollService) { }\r\n\r\n  ngOnInit() {\r\n    this.title = \"NSS Report\";\r\n      this.timestamp = new Date();\r\n      this.charts = []; //instantiate\r\n      this.hydroChartsArray = []; //instantiate \r\n      this.hydrographs = []; //instantiate\r\n      this.resultsBack = false;\r\n      this.multipleRegRegions = false;\r\n      this.resultsErrorLength = 0; //used for colspan on Errors <th>\r\n      //subscribe to scenarios\r\n      this._nssService.scenarios.subscribe((s: Array<Scenario>) => {\r\n          this.scenarios = s; this.resultsBack = false; this.equationResults = []; this.uniqueParameters = []; this.uniqueUnitTypes = [];\r\n          let regID:string = ''; this.multipleRegRegions = false;\r\n          this.scenarios.forEach((s) => {\r\n              this.appendixEquationsforExport = [];\r\n              //show weight inputs if more than 1 regression region chosen\r\n              this.showWeights = s.RegressionRegions.length > 1 ? true : false;\r\n              if (s.RegressionRegions.length > 1) this.multipleRegRegions = true;\r\n              else this.multipleRegRegions = false;\r\n\r\n              s.RegressionRegions.forEach((rr,index) => {\r\n                  regID = \"(RG_ID: \" + rr.ID + \")\"; //need to show the regID for each limit so they know which one they are out of range on\r\n                  if (rr.Results) {       \r\n                      if (rr.Results[0].Errors) {this.resultsErrorLength = rr.Results[0].Errors.length;}; \r\n                      let eqResult: Equationresults = { Name: \"\", Formulas: [] }; \r\n                      let equationString:string = '';\r\n                      if (index < 1){//first time thru\r\n                        equationString = rr.Name !== 'Area-Averaged' ? rr.Name + '\\r\\n' : '';\r\n                      } else {\r\n                          let name = rr.Name !== 'Area-Averaged' ? rr.Name + '\\r\\n' : '';\r\n                          equationString = '\\r\\n' + name;\r\n                      };                      \r\n                      //only care if average result\r\n                      if (rr.ID > 0) eqResult.Name = rr.Name;\r\n                      this.resultsBack = true;\r\n                      rr.Results.forEach((R) => {\r\n                          if (eqResult.Name != \"\") {\r\n                              eqResult.Formulas.push({ \"Code\": R.code, \"Equation\": this.buildEquation(rr.Parameters, R.Equation) });\r\n                              equationString += R.code + '= ,' + R.Equation + '\\r\\n';\r\n                          }\r\n                      });\r\n                      if (rr.ID > 0) this.equationResults.push(eqResult);\r\n                      this.appendixEquationsforExport.push(equationString);//push each equation string in for use when exporting appendix table later\r\n                      MathJax.Hub.Queue([\"Typeset\", MathJax.Hub, \"MathJax\"]); //for the appendix of equations\r\n                  } //end there's results\r\n                  //populate uniqueParameters and uniqueUnitTypes\r\n                  if(rr.ID > 0) {\r\n                    rr.Parameters.forEach((p) =>{\r\n                        //is this param code already in array list?                        \r\n                        let pIndex = this.uniqueParameters.map(function (parame) { return parame.Code; }).indexOf(p.Code);\r\n                        if (pIndex < 0) {\r\n                            p.LimitArray = [];                             \r\n                            if (p.Limits != undefined){\r\n                                p.Limits.rrID = regID;\r\n                                p.LimitArray.push(p.Limits);\r\n                            }\r\n                            this.uniqueParameters.push(p);\r\n                        } else {\r\n                                //already in here. find the matching one and add it's limits to the LimitArray\r\n                                if (p.Limits != undefined) p.Limits.rrID = regID;\r\n                                this.uniqueParameters[pIndex].LimitArray.push(p.Limits);\r\n                        }\r\n                        //is this unitType already in the array list?                        \r\n                        let uIndex = this.uniqueUnitTypes.map(function (unit){ return unit.Abbr;}).indexOf(p.UnitType.Abbr);\r\n                        if (uIndex < 0) {\r\n                            //not in there yet\r\n                            this.uniqueUnitTypes.push(p.UnitType);\r\n                        }                        \r\n                    });\r\n                  }\r\n                }); // end s.regressionRegion.forEach\r\n            });\r\n        });\r\n      //subscribe to getToast\r\n      this._nssService.getToast().subscribe((t:Toast) =>{\r\n          this.toast = t;\r\n          this._toasterService.pop(this.toast);\r\n      });\r\n      //subscribe to charts\r\n      this._nssService.getChart().subscribe((c) => {\r\n          if (c !== \"\") {\r\n              //scroll down to the chart section\r\n              let pageScrollInstance: PageScrollInstance = PageScrollInstance.simpleInstance(this._document, '#chart');\r\n              this._pageScrollService.start(pageScrollInstance);\r\n          }\r\n          if (c == \"Hydrograph\") {\r\n              let H_areaAveraged: boolean = false;\r\n              this.selectedPlot = \"Hydrograph\";\r\n              let hydroG: Hydrochart;\r\n              hydroG = { recurrence: null, lagTime: null, showExtraSettings: false, axis: 'BottomX', type_BX: 'linear', type_LY: 'linear', lineWidth: 1, lineSymbol: 'circle',              \r\n                                    majorTic_BX: true, majorGrid_BX: true, minorTic_BX: true, minorGrid_BX:true, \r\n                                    majorTic_LY: true,majorGrid_LY:true, minorTic_LY:true, minorGrid_LY:true, \r\n                                    colorPickerColor: '#7CB5EC', curveLabel: 'PK25', lineSymbolFillColor: '#7CB5EC', reverse_LY: false, reverse_BX: false, dataLabels:false };\r\n                                    \r\n              this.showChartBtn_txt = \"Hide\"; this.showCharts_btn = true;\r\n              //get array of recurrences from result      \r\n              let rec:number;     \r\n              this.scenarios.forEach((s) => {\r\n                  if (s.RegressionRegions.length > 1){\r\n                    s.RegressionRegions.forEach((rr) => {\r\n                        if (rr.Name == \"Area-Averaged\"){\r\n                            H_areaAveraged = true; //area averaged, add title to chart stating\r\n                            hydroG.curveLabel = \"Area-Averaged\";\r\n                            this.hChartXAxisValues = [];\r\n                            rr.Results.forEach((R) => {\r\n                               this.hChartXAxisValues.push(R.code);\r\n                            });\r\n                            //use constant array to populate chart [][]\r\n                            rec = rr.Results.filter(r => r.code == this.hChartXAxisValues[0])[0].Value;      \r\n                        }\r\n                    });\r\n                  } else {\r\n                      s.RegressionRegions.forEach((rr) => {\r\n                          this.hChartXAxisValues = [];\r\n                          rr.Results.forEach((R) => {\r\n                             this.hChartXAxisValues.push(R.code);\r\n                          });\r\n                          //use constant array to populate chart [][]\r\n                          rec = rr.Results.filter(r => r.code == this.hChartXAxisValues[0])[0].Value;\r\n                      });\r\n                   }\r\n              });//end foreach scenario\r\n              hydroG.recurrence = this.hChartXAxisValues[0]; //default to first one;\r\n              hydroG.lagTime = 1; //default value to change later\r\n              hydroG.title_BX = 'Time (hours)\\nHydrograph for ' + hydroG.lagTime + '-yr interval\\nNOTE: May not represent actual hydrograph';\r\n              hydroG.title_LY = 'Discharge (cubic meters per second)';\r\n              // http://api.highcharts.com/highcharts   , panning: true, panKey: 'shift'\r\n              this.hChartOptions = {\r\n                  exporting: {\r\n                       chartOptions: { // specific options for the exported image\r\n                           plotOptions: {\r\n                               series: {\r\n                                   dataLabels: {\r\n                                       enabled: true\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        fallbackToExportServer: false\r\n                    },\r\n                  chart: {type:'line', zoomType:'xy'},\r\n                  title: { text: ''},\r\n                  series: [{\r\n                      data: this.DIMLESS_ARRAY.map(p => { return [p[0]*1, this.sigFigures(p[1]*rec)] }),\r\n                      name: H_areaAveraged ? 'PK25 (Area-weighted average)' : 'PK25', \r\n                      states: {\r\n                        hover: { enabled: false } //stops the line from getting thicker when mouse onto the chart\r\n                      }\r\n                  }],\r\n                  tooltip: {\r\n                      formatter: function () {\r\n                          var s = '<b>(' + this.x + ', ' + this.y + ')</b>';\r\n                          return s;\r\n                      }\r\n                  },\r\n                  xAxis: {                      \r\n                      title: { \r\n                          text: 'Time (hours)<br/>Hydrograph for ' + hydroG.lagTime + '-yr interval<br/>NOTE: May not represent actual hydrograph',\r\n                      //    style: { fontWeight: 'bold'}\r\n                      },\r\n                      startOnTick: true,\r\n                      endOnTick: true,\r\n                      gridLineWidth: 1, //major grid (0/1)\r\n                      minorGridLineWidth: 1,   //minor grid (0/1)\r\n                      tickWidth: 1, //major tic (0/1)\r\n                      minorTickWidth: 1, //minor tic (0/1)\r\n                                \r\n                      minorTickInterval: 'auto', //line 191-196 needed for above to be changed                       \r\n                      minorTickLength:5,\r\n                      tickPosition: 'inside',\r\n                      minorTickPosition: 'inside',\r\n                      tickColor: '#000000',\r\n                      minorTickColor: '#000000' \r\n                  },\r\n                  yAxis: {\r\n                      title: { text: 'Discharge (cubic meters per second)' },                 \r\n                      startOnTick: true,\r\n                      endOnTick: true,                      \r\n                      gridLineWidth: 1, //major grid (0/1)\r\n                      minorGridLineWidth: 1,   //minor grid (0/1)                         \r\n                      tickWidth: 1, //major tic (0/1)\r\n                      minorTickWidth: 1, //minor tic (0/1)\r\n                                  \r\n                      minorTickInterval: 'auto', //line 205-210 needed for above to be changed                      \r\n                      minorTickLength: 5, \r\n                      tickPosition: 'inside',\r\n                      minorTickPosition: 'inside',\r\n                      tickColor: '#000000', \r\n                      minorTickColor: '#000000' \r\n                  }\r\n              };\r\n              this.hydroChartsArray.push(this.hChartOptions);\r\n              this.hydrographs.push(hydroG);\r\n          } else if (c == \"Frequency Plot\"){\r\n              if (this.fChartValues == undefined) {   \r\n                  let F_areaAveraged:boolean = false;\r\n                  this.fChartOptions = {};\r\n                  //only come in here if there isn't already a frequency plot\r\n                  this.frequencyPlotChart = { Faxis: 'BottomX', type_BX: 'returnPeriod', type_LY: 'returnPeriod', title_LY: 'Peak Discharge, In cubic meters per second',\r\n                                            title_BX: 'Recurrence Interval, in years\\nFlood Frequency Plot', lineWidth: 1, lineSymbol: 'circle',              \r\n                                            majorTic_BX: true, majorGrid_BX: true, minorTic_BX: true, minorGrid_BX: true, \r\n                                            majorTic_LY: true,majorGrid_LY:true, minorTic_LY:false, minorGrid_LY:false, \r\n                                            colorPickerColor: '#7CB5EC', curveLabel: 'PK25', lineSymbolFillColor: '#7CB5EC', reverse_LY: false, reverse_BX: false, dataLabels:false };           \r\n                  //get array of recurrences from result      \r\n                  let freqDataArray:number[][];\r\n                  freqDataArray = [];\r\n                  this.scenarios.forEach((s) => {\r\n                      if (s.RegressionRegions.length > 1){                          \r\n                          s.RegressionRegions.forEach((rr) => {      \r\n                              if (rr.Name == \"Area-Averaged\") {\r\n                                  F_areaAveraged = true; //area averaged, add title to chart stating\r\n                                  this.frequencyPlotChart.curveLabel = \"PK25 (Area-weighted average)\";                                           \r\n                                  rr.Results.forEach((R) => {\r\n                                      let x:number = +R.Name.substring(0,R.Name.indexOf(\" \"));\r\n                                      freqDataArray.push([x, this.sigFigures(R.Value)]);\r\n                                  })\r\n                              }\r\n                           });\r\n                      } else {\r\n                          s.RegressionRegions.forEach((rr) => {\r\n                            rr.Results.forEach((R) => {\r\n                                let x:number = +R.Name.substring(0,R.Name.indexOf(\" \"));\r\n                                freqDataArray.push([x, this.sigFigures(R.Value)]);\r\n                            }) \r\n                          })\r\n                      }\r\n                   \r\n                });//end foreach scenario\r\n                console.log(\"freq (start): \" + freqDataArray);\r\n                this.fChartValues = freqDataArray;\r\n                this.showChartBtn_txt = \"Hide\"; this.showCharts_btn = true;\r\n                this.fChartOptions = {\r\n                    exporting: {\r\n                        chartOptions: { // specific options for the exported image\r\n                            plotOptions: {\r\n                                series: {\r\n                                    dataLabels: {\r\n                                        enabled: true                                        \r\n                                    },\r\n                                    name: F_areaAveraged ? 'PK25 (Area-weighted average)' : 'PK25',\r\n                                    states: {\r\n                                        hover: { enabled: false } //stops the line from getting thicker when mouse onto the chart\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        fallbackToExportServer: false\r\n                    },\r\n                    chart: {type:'line', zoomType:'xy'},\r\n                    title: { text: ''},\r\n                    series: [{\r\n                        data: this.fChartValues,\r\n                        marker: { enabled: true},\r\n                        name: F_areaAveraged ? 'PK25 (Area-weighted average)' : 'PK25', \r\n                        states: {\r\n                            hover: { enabled: false } //stops the line from getting thicker when mouse onto the chart\r\n                        }\r\n                    }],\r\n                    tooltip: {\r\n                        formatter: function () {\r\n                            var s = '<b>(' + this.x +', ' + this.y + ')</b>';                          \r\n                            return s;\r\n                        }\r\n                    },\r\n                    xAxis: {       \r\n                        title: { text: 'Recurrence Interval, in years<br/>Flood Frequency Plot' },\r\n                        type: 'logarithmic',  \r\n                        startOnTick: true,\r\n                        endOnTick: true,                  \r\n                        gridLineWidth: 1, //major grid (0/1)\r\n                        tickWidth: 1, //major tic (0/1)              \r\n                        minorTickInterval: 'auto', //line 191-196 needed for above to be changed                       \r\n                        minorTickLength:5,\r\n                        tickPosition: 'inside',\r\n                        minorTickPosition: 'inside',\r\n                        tickColor: '#000000',\r\n                        minorTickColor: '#000000' \r\n                    },\r\n                    yAxis: {\r\n                        title: { text: 'Peak Discharge, In cubic meters per second' },    \r\n                        type: 'logarithmic',\r\n                        startOnTick: true,\r\n                        endOnTick: true,                        \r\n                        gridLineWidth: 1, //major grid (0/1)\r\n                        tickWidth: 1, //major tic (0/1)\r\n                        minorTickLength: 5, \r\n                        tickPosition: 'inside',\r\n                        minorTickPosition: 'inside',\r\n                        tickColor: '#000000', \r\n                        minorTickColor: '#000000' \r\n                    }\r\n                }\r\n              } //if this.fchartvalues == undefined (only go in there to make a new one not overwrite one)\r\n          } else {\r\n              // it's \"\" something was changed in the filters, clear out the charts\r\n              this.selectedPlot = undefined;\r\n              this.showCharts_btn = false;\r\n              this.hChartOptions = undefined;\r\n              this.hChartXAxisValues = [];\r\n              this.hydroChartsArray = []; \r\n              this.fChartOptions = undefined;\r\n              this.fChartValues = undefined;\r\n              this.hydrographs = [];\r\n          }\r\n      });\r\n  }// end ngOnInit()\r\n\r\n  //round all parameters and statistic values to 3 significant figures\r\n  public sigFigures(n){\r\n      if (n > 0){\r\n          var mult = Math.pow(10, 3 - Math.floor(Math.log(n) / Math.LN10) - 1);\r\n          return Math.round(n * mult) / mult;  \r\n      } else return n;\r\n  }\r\n  //add backticks around parameter code to escape in equation\r\n  private buildEquation(p: Parameter[], equation: string): string {\r\n      let fullEquation: string = \"\";\r\n      let arrayOfparameterValues = [];     \r\n      fullEquation = \"`\" + equation + \"`\";\r\n      return fullEquation;\r\n  }\r\n\r\n  //use tableString and tName to export a table to the browser\r\n  private triggerExportTable(tableString, tName) {\r\n      let csvData = tableString;\r\n      var a = document.createElement(\"a\");\r\n      a.setAttribute('style', 'display:none;');\r\n      document.body.appendChild(a);\r\n      var blob = new Blob([csvData], { type: 'text/csv' });\r\n      var url= window.URL.createObjectURL(blob);\r\n      a.href = url;\r\n      a.download = tName.replace(/ /g,\"_\") + '.csv';\r\n      a.click();      \r\n  }\r\n\r\n  //export inputs table\r\n  public exportInputTable(tableIndex){\r\n      let inputTableRows = this.inputTable._results[tableIndex].element.nativeElement.rows;\r\n      let vals:string = ''; let str:string = ''; \r\n      for (var r = 0; r < inputTableRows.length; r++){\r\n          vals = '';\r\n          for (var t = 0; t < inputTableRows[r].children.length; t++){\r\n              let child = inputTableRows[r].children[t];              \r\n              vals += child.innerText + ',';              \r\n              //if last one in this row \r\n              if (t == inputTableRows[r].children.length-1 && child.localName == 'td') {\r\n                  vals = vals.slice(0,-1);\r\n                  str+= vals + '\\r\\n';\r\n              }\r\n          }\r\n      };\r\n      str += '\\r\\n';\r\n      //go get results table and tack it on to this before exporting \r\n      this.exportTable(tableIndex, str);\r\n  }\r\n  \r\n  //export resultTable\r\n  public exportTable(tableIndex,inputTableStr){\r\n      let tableRows = this.resultTable._results[tableIndex].element.nativeElement.rows;\r\n      let keys:any = ''; let vals:string = ''; let str:string = ''; let tableName = '';\r\n      for (var r = 0; r < tableRows.length; r++){\r\n          keys = ''; vals = '';\r\n          for (var t = 0; t < tableRows[r].children.length; t++){\r\n              let child = tableRows[r].children[t];                            \r\n              if (child.localName == 'th') {\r\n                  if (keys == '' && tableName == '') tableName = inputTableStr.indexOf(\"Area-Averaged\") == 0 ? \"Area_Averaged\" : child.innerText;\r\n                  keys += child.innerText + ',';\r\n                  if (child.colSpan > 1){\r\n                      for (var cs = 1; cs < child.colSpan; cs++) keys += ' ,';                      \r\n                  }\r\n              }\r\n              else vals += child.innerText + ',';\r\n              if (t == tableRows[r].children.length-1 && child.localName == 'th') {\r\n                  keys = keys.slice(0, -1);\r\n                  inputTableStr += keys + '\\r\\n';\r\n              } else if (t == tableRows[r].children.length-1 && child.localName == 'td') {\r\n                  vals = vals.slice(0,-1);\r\n                  inputTableStr += vals + '\\r\\n';\r\n              }\r\n          }\r\n      };\r\n     this.triggerExportTable(inputTableStr, tableName);\r\n  }\r\n\r\n  public exportAppendix(){\r\n    let tableName = 'Appendix';\r\n    //parameter table\r\n    let paramTable = this.uniqueParameters;\r\n    let p_str:string = ''; \r\n    p_str += '\\r\\n' + 'Parameter Definitions' + '\\r\\n';\r\n    p_str += 'Name,Abbrev,Description' + '\\r\\n';\r\n    for (var p = 0; p < paramTable.length; p++){\r\n        p_str += paramTable[p].Name + ',' + paramTable[p].Code + ',' + paramTable[p].Description + '\\r\\n';\r\n    };\r\n    p_str += '\\r\\n';\r\n\r\n    //unit types table\r\n    let unitTable = this.uniqueUnitTypes;\r\n    let u_str:string = ''; \r\n    u_str += '\\r\\n' + 'Unit Types' + '\\r\\n';\r\n    u_str += 'Abbrev,Unit' + '\\r\\n';\r\n    for (var u = 0; u < unitTable.length; u++){\r\n        u_str += '(' + unitTable[u].Abbr + '),' + unitTable[u].Unit + '\\r\\n';\r\n    };\r\n    u_str += '\\r\\n';    \r\n    let equa_str = this.appendixEquationsforExport.join(',');\r\n    let allTablesJoinedString = equa_str + p_str + u_str;\r\n    this.triggerExportTable(allTablesJoinedString, tableName);\r\n    //this.triggerExportTable(this.appendixEquationsforExport.join(','), tableName);\r\n  }\r\n  //onBlur of Value, compare to min/max and show warning\r\n  public compareValue(value: Parameter) {\r\n      //is there a value or just click in and then out (would be \"\")\r\n      if (value.Value) {       \r\n          //make sure all parameters of this CODE has this VALUE assigned to it in the real scenario Object\r\n           this.scenarios.forEach((s) => {\r\n              s.RegressionRegions.forEach((rr) => {\r\n                  rr.Parameters.forEach((p) =>{\r\n                      if (p.Code == value.Code) \r\n                        p.Value = value.Value;\r\n                  })\r\n              })\r\n           }) //end foreach scenario\r\n          //is value outside of range (if ther is limit range)\r\n          if (value.Limits !== undefined) {\r\n              let limitFlag:boolean = false;\r\n              value.LimitArray.forEach((x)=>{\r\n                  if (value.Value > x.Max || value.Value < x.Min){ \r\n                      limitFlag = true;                       \r\n                      x.OutOfRange = true;\r\n                      value.missingVal = false;//remove the missingVal flag (since there is something in here)\r\n                  }\r\n                  else {\r\n                    //value is within proper range (no warning, has a value)                    \r\n                    x.OutOfRange = false;\r\n                    value.missingVal = false;//field is not empty\r\n                }\r\n              });\r\n              //need to flag the outter limit OutOfRange outside of the LimitArray loop\r\n              if (limitFlag) value.OutOfRange = true; //flag it so\r\n              else value.OutOfRange = false; \r\n          } //end limits are not undefined\r\n          else {\r\n              value.OutOfRange = false; //within range\r\n              value.LimitArray.forEach((l)=>{l.OutOfRange=false;})\r\n              value.missingVal = false;//field is not empty\r\n          }          \r\n      } //end value.Value (has value)\r\n       else {\r\n          value.LimitArray.forEach((l)=>{l.OutOfRange=false;})\r\n          value.OutOfRange = false; //no need to check range\r\n          value.missingVal = false;//field is empty, but we don't care until they hit submit on sidebar        \r\n      }\r\n  }  \r\n  //toggle parameter description\r\n  public showDescription(p:Parameter, paramIndex:number) {\r\n      //set this parameters seeDescription property to true/false\r\n      this.uniqueParameters[paramIndex].seeDescription = !this.uniqueParameters[paramIndex].seeDescription;\r\n  }  \r\n  //when chart loads, store an instance of the highchart to access functions\r\n  private saveInstance(chartInst) {\r\n        this.charts.push(chartInst);\r\n  };\r\n\r\n  /////////////////////////////////////// start HYDRO STUFF ///////////////////////////////////////////////////\r\n  //clicked Bottom x & type == update chart HYDRO\r\n  public setXaxisType(i, newType:string){      \r\n      //converting to logarithmic gets ugly (line draws partially outside of plot area) due to the minorTickInterval being set to auto\r\n      if (newType == 'logarithmic') {     \r\n          //this makes minor ticks and grid lines disappear..turn them off and uncheck boxes\r\n          this.charts[i].xAxis[0].update({tickInterval: 'auto', minorGridLineWidth: 0, minorTickWidth: 0});           \r\n          this.hydrographs[i].minorGrid_BX = false; this.hydrographs[i].minorTic_BX = false;     \r\n      } else {\r\n          this.charts[i].xAxis[0].update({tickInterval: null});       \r\n      }\r\n      this.charts[i].xAxis[0].update({ type: newType});\r\n  }\r\n  //clicked Left y & type == update chart HYDRO\r\n  public setYaxisType(i, newType:string){      \r\n      //converting to logarithmic gets ugly (line draws partially outside of plot area) due to the minorTickInterval being set to auto\r\n      if (newType == 'logarithmic') {\r\n          //this makes minor ticks and grid lines disappear..turn them off and uncheck boxes\r\n          this.charts[i].yAxis[0].update({ minorGridLineWidth: 0, minorTickWidth: 0}); //tickInterval:'auto'\r\n          this.hydrographs[i].minorGrid_LY = false; this.hydrographs[i].minorTic_LY = false;   \r\n\r\n      } else {\r\n          this.charts[i].yAxis[0].update({tickInterval: null});          \r\n      }\r\n      this.charts[i].yAxis[0].update({ type: newType});        \r\n  }\r\n  //update title on x axis as they type HYDRO\r\n  public updateBXtitle(i){      \r\n      this.hydroChartsArray[i].xAxis.title.text = this.hydrographs[i].title_BX.replace(/\\n/g, '<br/>'); //bottom title      \r\n      this.charts[i].xAxis[0].setTitle({ text: this.hydroChartsArray[i].xAxis.title.text }); //title of xAxis\r\n  }\r\n  //update title on y axis as they type HYDRO\r\n  public updateLYtitle(i){      \r\n      this.hydroChartsArray[i].yAxis.title.text = (this.hydrographs[i].title_LY.replace(/\\n/g, '<br/>'));      \r\n      this.charts[i].yAxis[0].setTitle({ text: this.hydroChartsArray[i].yAxis.title.text }); //title of yAxis\r\n  }\r\n  //update ticks or grids on chart (0/1) HYDRO\r\n  public setXChartLines(i:number, whichOne:string, value:boolean){\r\n      /* gridLineWidth: 1 //major grid (0/1)    minorGridLineWidth: 1 //minor grid (0/1)   tickWidth: 1 //major tic (0/1)  minorTickWidth: 1 //minor tic (0/1)  */\r\n      switch (whichOne){\r\n          case 'gridLineWidth':\r\n            if (value) this.charts[i].xAxis[0].update({gridLineWidth: 1});\r\n            else this.charts[i].xAxis[0].update({gridLineWidth: 0});\r\n            break;\r\n          case 'minorGridLineWidth':\r\n            if (value) this.charts[i].xAxis[0].update({minorGridLineWidth: 1});\r\n            else  this.charts[i].xAxis[0].update({minorGridLineWidth: 0});\r\n            break;\r\n          case 'tickWidth':\r\n            if (value) this.charts[i].xAxis[0].update({tickWidth: 1});\r\n            else this.charts[i].xAxis[0].update({tickWidth: 0});\r\n            break;\r\n          case 'minorTickWidth':\r\n            if (value) this.charts[i].xAxis[0].update({minorTickWidth: 1});\r\n            else this.charts[i].xAxis[0].update({minorTickWidth: 0});\r\n            break;\r\n      }      \r\n  }\r\n  //update ticks or grids on chart (0/1) HYDRO\r\n  public setYChartLines(i:number, whichOne:string, value:boolean){\r\n      /* gridLineWidth: 1 //major grid (0/1)    minorGridLineWidth: 1 //minor grid (0/1)   tickWidth: 1 //major tic (0/1)  minorTickWidth: 1 //minor tic (0/1)  */\r\n      switch (whichOne){\r\n          case 'gridLineWidth':\r\n            if (value) this.charts[i].yAxis[0].update({gridLineWidth: 1});\r\n            else this.charts[i].yAxis[0].update({gridLineWidth: 0});\r\n            break;\r\n          case 'minorGridLineWidth':\r\n            if (value) this.charts[i].yAxis[0].update({minorGridLineWidth: 1});\r\n            else  this.charts[i].yAxis[0].update({minorGridLineWidth: 0});\r\n            break;\r\n          case 'tickWidth':\r\n            if (value) this.charts[i].yAxis[0].update({tickWidth: 1});\r\n            else this.charts[i].yAxis[0].update({tickWidth: 0});\r\n            break;\r\n          case 'minorTickWidth':\r\n            if (value) this.charts[i].yAxis[0].update({minorTickWidth: 1});\r\n            else this.charts[i].yAxis[0].update({minorTickWidth: 0});\r\n            break;\r\n      }          \r\n  }  \r\n  //reverse the data HYDRO\r\n  public setReverseData(i:number,which:string, value:boolean){\r\n      if (which == 'bx'){\r\n          \r\n          this.charts[i].xAxis[0].update({reversed:value});     \r\n      } else {\r\n          this.charts[i].yAxis[0].update({reversed:value});    \r\n      }\r\n  }\r\n  //change line color HYDRO\r\n  public changeLineColor(i:number, c:string){\r\n      this.charts[i].series[0].update({color: c});\r\n      this.hydrographs[i].colorPickerColor = c;\r\n  }\r\n  //change line width HYDRO\r\n  public setLineWidth(i:number){\r\n      this.charts[i].series[0].update({lineWidth: this.hydrographs[i].lineWidth});\r\n  }\r\n  //change line symbol fill color HYDRO\r\n  public changeLineSymbolColor(i:number, c:string){\r\n      this.charts[i].series[0].update({marker:{fillColor: c}});\r\n      this.hydrographs[i].lineSymbolFillColor = c;\r\n  }\r\n  //change point symbol HYDRO\r\n  public setLineSymbol(i:number,e:Event){\r\n      this.charts[i].series[0].update({marker: {symbol: this.hydrographs[i].lineSymbol}});\r\n  }  \r\n  //change curve label HYDRO\r\n  public updateCurveLabel(i:number){\r\n      this.charts[0].series[0].update({ name: this.hydrographs[i].curveLabel });\r\n  }\r\n  //show/hide data labels  HYDRO\r\n  public updateDataLabels(i:number, value:boolean){\r\n      this.charts[i].series[0].update({ dataLabels: { enabled: value, formatter: function () {return '(' + this.x + ', ' + this.y + ')'; }}});\r\n  }\r\n  //changed values, refresh the hydrograph with new data HYDRO\r\n  public refreshHydrograph(i, values) {\r\n      //top title (updated with which recurrence interval they choose)\r\n      this.hydroChartsArray[i].title.text = 'Hydrograph (Recurrence Interval: ' + this.hydrographs[i].recurrence + ')';\r\n\r\n      //see if titles were changed (if they didn't manually change it, apply update to lagtime)\r\n      if (values.title_BX._pristine) {\r\n          this.hydroChartsArray[i].xAxis.title.text = 'Time (hours)<br/>Hydrograph for ' + this.hydrographs[i].lagTime + '-yr interval<br/>NOTE: May not represent actual hydrograph';\r\n          this.hydrographs[i].title_BX = 'Time (hours)\\nHydrograph for ' + this.hydrographs[i].lagTime + '-yr interval\\nNOTE: May not represent actual hydrograph';\r\n          this.charts[i].xAxis[0].setTitle({ text:  this.hydroChartsArray[i].xAxis.title.text }); //title of xAxis\r\n      }\r\n      \r\n     \r\n      this.charts[i].setTitle({ text:  this.hydroChartsArray[i].title.text }); //title of chart  \r\n\r\n      //get the corresponding results value for the recurrence chosen to update the chart data\r\n      let recValue:number;\r\n      this.scenarios.forEach((s) => {\r\n          s.RegressionRegions.forEach((rr) => {\r\n            if (rr.Results) \r\n                recValue = rr.Results.filter(r => r.code == this.hydrographs[i].recurrence)[0].Value;            \r\n        });\r\n      });                \r\n      this.charts[i].series[0].setData(this.DIMLESS_ARRAY.map(p => { return [p[0]*this.hydrographs[i].lagTime, p[1]*recValue]})); //update data\r\n      this.hydrographs[i].showExtraSettings = false; //just close the extra settings part\r\n  }   \r\n  //show/hide additional user settings options for the chart (axis, title, etc) HYDRO\r\n  public showHideAdditionalChartSettings(i){\r\n      this.hydrographs[i].showExtraSettings = !this.hydrographs[i].showExtraSettings;\r\n  }\r\n  //want to remove a hydrochart HYDRO\r\n  public removeHydroChart(ind: number) {\r\n    this.hydroChartsArray.splice(ind, 1);\r\n    this.charts.splice(ind, 1);\r\n    this.hydrographs.splice(ind, 1);\r\n  }\r\n  /////////////////////////////////////////// end HYDRO STUFF ///////////////////////////////////////////////////\r\n\r\n  ///////////////////////////////////////start FREQUENCY STUFF ///////////////////////////////////////////////////\r\n  public saveFreqInstance(freqChartInst){\r\n      this.freqChart = freqChartInst;\r\n  }\r\n  //clicked Bottom x & type == update chart FREQUENCY\r\n  public setFreqXaxisType(newType:string){   \r\n      let freqDataArray:number[][]; freqDataArray = [];   \r\n      //converting 'percent', 'fraction', or 'returnPeriod' (default/onload is returnPeriod)\r\n      if (newType == 'percent') {     \r\n          this.scenarios.forEach((s) => {\r\n              s.RegressionRegions.forEach((rr) => {\r\n                  if (rr.Results) {               \r\n                      rr.Results.forEach((R) => {\r\n                          let x:number = +R.Name.substring(0,R.Name.indexOf(\" \"));\r\n                          freqDataArray.push([(1/x)*100, R.Value]);                         \r\n                      }) \r\n                  }\r\n              });\r\n          });//end foreach scenario       \r\n          this.frequencyPlotChart.reverse_BX = true;\r\n          this.freqChart.xAxis[0].update({reversed:true, labels: {formatter:function() {                \r\n                return Highcharts.numberFormat(this.value ,0,',') + '%';\r\n                }}});          \r\n      } else if (newType == 'fraction') {\r\n          //divide 1 into probability (pk500)\r\n          this.scenarios.forEach((s) => {\r\n              s.RegressionRegions.forEach((rr) => {\r\n                  if (rr.Results) {                 \r\n                      rr.Results.forEach((R) => {\r\n                          let x:number = +R.Name.substring(0,R.Name.indexOf(\" \"));\r\n                          freqDataArray.push([1/x, R.Value]);                          \r\n                      }) \r\n                  }\r\n              });\r\n          });//end foreach scenario\r\n          this.frequencyPlotChart.reverse_BX = true;\r\n          this.freqChart.xAxis[0].update({reversed:true, labels: {formatter:function() { return this.value; }}});                  \r\n      } else {\r\n          //returnPeriod\r\n          this.scenarios.forEach((s) => {\r\n              s.RegressionRegions.forEach((rr) => {\r\n                  if (rr.Results) {                 \r\n                      rr.Results.forEach((R) => {\r\n                          let x:number = +R.Name.substring(0,R.Name.indexOf(\" \"));\r\n                          freqDataArray.push([x, R.Value]);                          \r\n                      }) \r\n                  }\r\n              });\r\n          });//end foreach scenario\r\n          this.frequencyPlotChart.reverse_BX = false;\r\n          this.freqChart.xAxis[0].update({reversed:false, labels: {formatter:function() { return this.value; }}});              \r\n          console.log(\"return period: \" + freqDataArray);\r\n      }      \r\n      this.freqChart.series[0].setData(freqDataArray);\r\n  } \r\n  //update title on x axis as they type FREQUENCY\r\n  public updateFreqBXtitle(){      \r\n      this.fChartOptions.xAxis.title.text = this.frequencyPlotChart.title_BX.replace(/\\n/g, '<br/>'); //bottom title      \r\n      this.freqChart.xAxis[0].setTitle({ text: this.fChartOptions.xAxis.title.text }); //title of xAxis\r\n  }\r\n  //update title on y axis as they type FREQUENCY\r\n  public updateFreqLYtitle(){      \r\n      this.fChartOptions.yAxis.title.text = (this.frequencyPlotChart.title_LY.replace(/\\n/g, '<br/>'));      \r\n      this.freqChart.yAxis[0].setTitle({ text: this.fChartOptions.yAxis.title.text }); //title of yAxis\r\n  }\r\n  //update ticks or grids on chart (0/1) FREQUENCY\r\n  public setFreqXChartLines(whichOne:string, value:boolean){\r\n      /* gridLineWidth: 1 //major grid (0/1)    minorGridLineWidth: 1 //minor grid (0/1)   tickWidth: 1 //major tic (0/1)  minorTickWidth: 1 //minor tic (0/1)  */\r\n      switch (whichOne){\r\n          case 'gridLineWidth':\r\n            if (value) this.freqChart.xAxis[0].update({gridLineWidth: 1});\r\n            else this.freqChart.xAxis[0].update({gridLineWidth: 0});\r\n            break;\r\n          case 'minorGridLineWidth':\r\n            if (value) this.freqChart.xAxis[0].update({minorGridLineWidth: 1});\r\n            else  this.freqChart.xAxis[0].update({minorGridLineWidth: 0});\r\n            break;\r\n          case 'tickWidth':\r\n            if (value) this.freqChart.xAxis[0].update({tickWidth: 1});\r\n            else this.freqChart.xAxis[0].update({tickWidth: 0});\r\n            break;\r\n          case 'minorTickWidth':\r\n            if (value) this.freqChart.xAxis[0].update({minorTickWidth: 1});\r\n            else this.freqChart.xAxis[0].update({minorTickWidth: 0});\r\n            break;\r\n      }      \r\n  }\r\n  //update ticks or grids on chart (0/1) FREQUENCY\r\n  public setFreqYChartLines(whichOne:string, value:boolean){\r\n      /* gridLineWidth: 1 //major grid (0/1)    minorGridLineWidth: 1 //minor grid (NOT USED WITH LOG)  tickWidth: 1 //major tic (0/1)  minorTickWidth: 1 //minor tic (NOT USED WITH LOG)  */\r\n      switch (whichOne){\r\n          case 'gridLineWidth':\r\n            if (value) this.freqChart.yAxis[0].update({gridLineWidth: 1});\r\n            else this.freqChart.yAxis[0].update({gridLineWidth: 0});\r\n            break;          \r\n          case 'tickWidth':\r\n            if (value) this.freqChart.yAxis[0].update({tickWidth: 1});\r\n            else this.freqChart.yAxis[0].update({tickWidth: 0});\r\n            break;          \r\n      }          \r\n  }  \r\n  //reverse the data FREQUENCY\r\n  public setFreqReverseData(which:string, value:boolean){\r\n      if (which == 'bx'){          \r\n          this.freqChart.xAxis[0].update({reversed:value});     \r\n      } else {\r\n          this.freqChart.yAxis[0].update({reversed:value});    \r\n      }\r\n  }\r\n  //change line color FREQUENCY\r\n  public changeFreqLineColor(c:string){\r\n      this.freqChart.series[0].update({color: c});\r\n      this.frequencyPlotChart.colorPickerColor = c;\r\n  }\r\n  //change line width FREQUENCY\r\n  public setFreqLineWidth(){\r\n      this.freqChart.series[0].update({lineWidth: this.frequencyPlotChart.lineWidth});\r\n  }\r\n  //change line symbol fill color FREQUENCY\r\n  public changeFreqLineSymbolColor(c:string){\r\n      this.freqChart.series[0].update({marker:{fillColor: c}});\r\n      this.frequencyPlotChart.lineSymbolFillColor = c;\r\n  }\r\n  //change point symbol FREQUENCY\r\n  public setFreqLineSymbol(e:Event){\r\n      this.freqChart.series[0].update({marker: {symbol: this.frequencyPlotChart.lineSymbol}});\r\n  }  \r\n  //change curve label FREQUENCY\r\n  public updateFreqCurveLabel(){\r\n      this.freqChart.series[0].update({ name: this.frequencyPlotChart.curveLabel });\r\n  } \r\n  //show/hide data labels  FREQUENCY\r\n  public updateFreqDataLabels(value:boolean){\r\n      this.freqChart.series[0].update({ dataLabels: { enabled: value, formatter: function () {return '('+this.x +'yr, ' + this.y + ')'; }}});\r\n  }  \r\n  //show/hid additional user settings options for the chart Frequency\r\n  public showHideAddFChartSettings(){\r\n      this.showExtraFREQSettings = !this.showExtraFREQSettings;\r\n  }  \r\n  public removeFreqChart() {\r\n      this.frequencyPlotChart = undefined;\r\n      this.freqChart = undefined;\r\n      this.fChartOptions = undefined;\r\n      this.fChartValues = undefined;\r\n  }\r\n  //////////////////////////////////////end FREQUENCY STUFF  /////////////////////////////////////////////////////\r\n  //toggle charts\r\n  public showHideCharts() {\r\n      //if showCharts_btn is true == show the charts and showChartBtn_txt says \"Hide\"\r\n      //if showCharts_btn is false == hide the charts and showChartBtn_txt says \"Show\"\r\n      this.showCharts_btn = !this.showCharts_btn;\r\n      if (this.showCharts_btn) this.showChartBtn_txt = \"Hide\";\r\n      else this.showChartBtn_txt = \"Show\";\r\n  }\r\n  //want to edit the scenario. remove Result\r\n  public editScenario(){\r\n      this.scenarios.forEach((s) => {\r\n          let areaWeighed = s.RegressionRegions.map(function (r) { return r.ID; }).indexOf(0);\r\n          if (areaWeighed > -1) s.RegressionRegions.splice(areaWeighed,1); //remove the area weighted regRegion\r\n          s.RegressionRegions.forEach((r)=>{\r\n              this.resultsBack = false;\r\n              delete r.Results;\r\n          });\r\n      });\r\n      this._nssService.setScenarios(this.scenarios);\r\n      \r\n  }\r\n  //number only allowed in Value\r\n  public _keyPress(event: any) {\r\n      const pattern = /[0-9\\+\\-\\.\\ ]/;\r\n      let inputChar = String.fromCharCode(event.charCode);\r\n      if (!pattern.test(inputChar)) {\r\n          // invalid character, prevent input\r\n          event.preventDefault();\r\n      }\r\n  }\r\n  //need superscript tag in unittype (using <span [innerHTML]=\"setSuperScript(p.UnitType.Abbr)\"> converts tags to actual html)\r\n  public setSuperScript(unit: string) {\r\n      let newUnitWithSupTag: string = '';\r\n      let indexOfSup = unit.indexOf('^');\r\n      if (indexOfSup > -1)\r\n          newUnitWithSupTag = unit.substring(0,indexOfSup) + '<sup>' + unit.substring(indexOfSup+1) + '</sup>';      \r\n      else newUnitWithSupTag = unit;\r\n\r\n      return newUnitWithSupTag;\r\n  }\r\n  //print pdf \r\n  public printPage() {\r\n    let printContents, popupWin;\r\n    printContents = document.getElementById('printArea').innerHTML;\r\n    popupWin = window.open('', '_blank', 'top=0,left=0,height=100%,width=auto');\r\n    popupWin.document.open();\r\n    popupWin.document.write(`\r\n      <html>\r\n        <head>\r\n          <title></title>\r\n          <style>                   \r\n            .hidden-print {\r\n                display: none !important;\r\n            }\r\n            #print-content * {\r\n                visibility: visible;\r\n            }\r\n            h3 {\r\n                text-align: center;\r\n            }\r\n            th, td {\r\n                margin-top:-8px;\r\n                padding-top:8px;\r\n                page-break-inside:avoid;\r\n            }\r\n          </style>\r\n          <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" \r\n            integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">\r\n        </head>\r\n    <body onload=\"window.print();window.close()\">${printContents}</body>\r\n      </html>`\r\n    );\r\n    popupWin.document.close();\r\n    }  \r\n} // end component\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mainview/mainview.component.ts","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'wim-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n  public title:string;\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.title = \"National Stream Flow Statistics\";\r\n  }\r\n  public toggleSidebar(){\r\n    //should allow sidebar to go in and come back out\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/navbar/navbar.component.ts","import { Component, OnInit } from '@angular/core';\r\nimport { URLSearchParams }          from '@angular/http';\r\nimport { NSSService}                from '../app.service';\r\nimport { Region }                  from '../shared/interfaces/region';\r\nimport { Scenario }                from '../shared/interfaces/scenario';\r\nimport { Statisticgroup }          from '../shared/interfaces/statisticgroup';\r\nimport { Regressiontype }          from '../shared/interfaces/regressiontype';\r\nimport { Regressionregion }        from '../shared/interfaces/regressionregion';\r\nimport { IMultiSelectOption, IMultiSelectSettings, IMultiSelectTexts } from '../../../node_modules/angular-2-dropdown-multiselect';\r\nimport { ToasterContainerComponent, ToasterService } from 'angular2-toaster/angular2-toaster';\r\nimport { Toast } from 'angular2-toaster/src/toast';\r\n\r\n@Component({\r\n  selector: 'wim-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.css']\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n  public doShow:boolean;\r\n  public showChart: boolean; //show the Chart: Sidebar option\r\n  public plotTypes: Array<string> = ['Frequency Plot', 'Hydrograph']; //Hydrograph, Frequency Plot\r\n  public selectedPlot: string; //which chart type they selected\r\n  //regions\r\n  public get selectedRegion():Region {return this._nssService.selectedRegion;};\r\n  public regions: Array<Region>;\r\n\r\n  //regression regions\r\n  private selectedRegRegionIDs: Array<number>; //multiselect populates this with those selected\r\n  public get selectedRegRegion(): Array<Regressionregion> { return this._nssService.selectedRegRegions; };\r\n  public regressionRegions: Array<Regressionregion>; \r\n  private myRRSettings: IMultiSelectSettings;\r\n  private myMSTexts: IMultiSelectTexts;\r\n\r\n  //regression types\r\n  private selectedRegTypeIDs: Array<number>;\r\n  public get selectedRegType(): Array<Regressiontype> { return this._nssService.selectedRegressionTypes; }\r\n  public regressionTypes: Array<Regressiontype>;  \r\n  private myRTSettings: IMultiSelectSettings;  \r\n\r\n  //statisticGrps\r\n  private selectedStatGrpIDs: Array<number>;\r\n  public get selectedStatGrp(): Array<Statisticgroup> { return this._nssService.selectedStatGroups; };\r\n  public statisticGroups: Array<Statisticgroup>;\r\n  private mySGSettings: IMultiSelectSettings;\r\n\r\n  //scenario\r\n  public scenarios: Array<Scenario>;\r\n\r\n  constructor(private _nssService:NSSService) { }\r\n\r\n  ngOnInit() {\r\n    this.doShow=true;\r\n    this.selectedPlot = \"\";\r\n    //subscribe to regions\r\n    this._nssService.regions.subscribe((regions:Array<Region>)=> {this.regions = regions;});\r\n    //subscribe to regressionRegions\r\n    this._nssService.regressionRegions.subscribe((rr:Array<Regressionregion>)=>{\r\n        this.regressionRegions = rr;\r\n        //remove from selectedRegRegion if not in response.\r\n        if (this.selectedRegRegionIDs != undefined) {\r\n            if (rr.length > 0) {\r\n                for (var rri = this.selectedRegRegionIDs.length; rri--;) {\r\n                    let RRind = rr.map(function (eachrr) { return eachrr.ID; }).indexOf(this.selectedRegRegionIDs[rri]);\r\n                    if (RRind < 0) this.selectedRegRegionIDs.splice(rri, 1);\r\n                };\r\n            } else this.selectedRegRegionIDs = [];\r\n        }\r\n    });\r\n    //subscribe to StatisticGroups\r\n    this._nssService.statisticGroups.subscribe((sg: Array<Statisticgroup>) => {\r\n        this.statisticGroups = sg;\r\n        //remove from selectedStatGrp if not in response.\r\n        if (this.selectedStatGrpIDs != undefined) {\r\n            if (sg.length > 0) {\r\n                for (var si = this.selectedStatGrpIDs.length; si--;) {\r\n                    let SSind = sg.map(function (eachsg) { return eachsg.ID; }).indexOf(this.selectedStatGrpIDs[si]);\r\n                    if (SSind < 0)\r\n                        this.selectedStatGrpIDs.splice(si, 1);\r\n                };\r\n            } else this.selectedStatGrpIDs = [];\r\n        } \r\n    });\r\n    //subscribe to regressionTypes\r\n    this._nssService.regressionTypes.subscribe((rt: Array<Regressiontype>) => {\r\n        this.regressionTypes = rt;\r\n        //remove from selectedRegType if not in response\r\n        if (this.selectedRegTypeIDs != undefined) {\r\n            if (rt.length > 0) {\r\n                for (var rti = this.selectedRegTypeIDs.length; rti--;) {\r\n                    let RTind = rt.map(function (eachrt) { return eachrt.ID; }).indexOf(this.selectedRegTypeIDs[rti]);\r\n                    if (RTind < 0)\r\n                        this.selectedRegTypeIDs.splice(rti, 1);\r\n                };\r\n            } else this.selectedRegTypeIDs = [];\r\n        }\r\n    });\r\n    //subscribe to scenario\r\n    this._nssService.scenarios.subscribe((s: Array<Scenario>) => {\r\n        this.scenarios = s;  \r\n        this.scenarios.forEach((s) => {\r\n            //if there are results, show the chart buttons\r\n            if (s.RegressionRegions.length > 0 && s.RegressionRegions[0].Results && s.StatisticGroupName.indexOf(\"Peak-Flow\") > -1) this.showChart = true;\r\n            else this.showChart = false;             \r\n        });\r\n    });\r\n    //settings for multiselect.. added max-width and font-size to the library's ts file directly\r\n    this.myRRSettings = {\r\n        pullRight: false,\r\n        enableSearch: false,\r\n        checkedStyle: 'glyphicon',//'checkboxes',\r\n        buttonClasses: 'btn btn-default',\r\n        selectionLimit: 0,\r\n        closeOnSelect: false,\r\n        showCheckAll: true,\r\n        showUncheckAll: true,\r\n        dynamicTitleMaxItems: 2,\r\n        maxHeight: '300px'           \r\n    }; \r\n    this.myRTSettings = {\r\n        pullRight: false,\r\n        enableSearch: false,\r\n        checkedStyle: 'glyphicon',//'checkboxes',\r\n        buttonClasses: 'btn btn-default',\r\n        selectionLimit: 0,\r\n        closeOnSelect: false,\r\n        showCheckAll: true,\r\n        showUncheckAll: true,\r\n        dynamicTitleMaxItems: 2,\r\n        maxHeight: '300px'\r\n    }; \r\n    this.mySGSettings = {\r\n        pullRight: false,\r\n        enableSearch: false,\r\n        checkedStyle: 'glyphicon',//'checkboxes',\r\n        buttonClasses: 'btn btn-default',\r\n        selectionLimit: 0,\r\n        closeOnSelect: false,\r\n        showCheckAll: true,\r\n        showUncheckAll: true,\r\n        dynamicTitleMaxItems: 2,\r\n        maxHeight: '300px'\r\n    }; \r\n    this.myMSTexts = {\r\n        checkAll: 'Check all',\r\n        uncheckAll: 'Uncheck all',\r\n        checked: 'checked',\r\n        checkedPlural: 'checked',            \r\n        defaultTitle: 'Select'\r\n    };\r\n    \r\n  } // end ngOnInit()\r\n\r\n   //select Region. get regressionRegions, regressionTypes, StatisticGroups\r\n  public onRegSelect(r:Region){\r\n    this.selectedRegRegionIDs = []; this.selectedStatGrpIDs = []; this.selectedRegTypeIDs = [];\r\n    this._nssService.selectedRegion = r;      \r\n  }\r\n\r\n  //select of regression region. set the selectedRegRegions\r\n  public onRegressionRegSelect(): void {   \r\n      let selectedRegRegions: Array<Regressionregion> = new Array<Regressionregion>();\r\n      this.selectedRegRegionIDs.forEach((srr) => {\r\n          //for each selected (number only) get the IRegressionRegion to send as array to the _service for updating on main\r\n          selectedRegRegions.push(this.regressionRegions.filter(function (rr) { return rr.ID == srr; })[0]);\r\n      }); \r\n      this._nssService.selectedRegRegions = selectedRegRegions;                  \r\n  }\r\n\r\n  //select of statisticgrp. update regressionregions and regressiontypes and scenario for mainView\r\n  public onStatGrpSelect(): void {\r\n      let selectedStatGroups: Array<Statisticgroup> = new Array<Statisticgroup>();\r\n      this.selectedStatGrpIDs.forEach((ssg) => {\r\n          //for each selected (number only) get the IRegressionRegion to send as array to the _service for updating on main\r\n          selectedStatGroups.push(this.statisticGroups.filter(function (rr) { return rr.ID == ssg; })[0]);\r\n      });\r\n      this._nssService.selectedStatGroups = selectedStatGroups;\r\n      \r\n  }\r\n\r\n  //select of regression type. update statisticgrps and regressionregions\r\n  public onRegTypeSelect(): void {\r\n      let selectedRegTypes: Array<Regressiontype> = new Array<Regressiontype>();\r\n      this.selectedRegTypeIDs.forEach((srt) => {\r\n          //for each selected (number only) get the IRegressionRegion to send as array to the _service for updating on main\r\n          selectedRegTypes.push(this.regressionTypes.filter(function (rr) { return rr.ID == srt; })[0]);\r\n      });\r\n      this._nssService.selectedRegressionTypes = selectedRegTypes;        \r\n  }\r\n\r\n  //submit / Compute button click\r\n  public CalculateScenario(): void {       \r\n      let ValueRequired: boolean = false;\r\n      let totalWeight: number = Number(0);\r\n      let numOfRegRegions:number = Number(0); //don't care about weights if only 1 regRegion\r\n      //make sure all values are populated\r\n      this.scenarios.forEach((s) => {\r\n          numOfRegRegions = s.RegressionRegions.length;\r\n          s.RegressionRegions.forEach((rr) => {\r\n              if (numOfRegRegions > 1) totalWeight += Number(rr.PercentWeight);\r\n              rr.Parameters.forEach((p) => {\r\n                  if (!p.Value) {\r\n                      ValueRequired = true;\r\n                      p.missingVal = true;                        \r\n                  }\r\n                  else p.missingVal = false;\r\n              });\r\n          });\r\n      });\r\n      \r\n      if (ValueRequired) {\r\n          let toast: Toast = {\r\n              type: 'warning',\r\n              title: 'Error',\r\n              body: 'All values are required'\r\n          };\r\n          this._nssService.showToast(toast);          \r\n      } else if (numOfRegRegions > 1 && (totalWeight < 100 || isNaN(totalWeight))) {\r\n          let weightToast:Toast = { \r\n              type: 'warning',\r\n              title: 'Error',\r\n              body: '% Weights must equal 100%'\r\n          };\r\n          this._nssService.showToast(weightToast);\r\n      }//end invalid\r\n      else {\r\n          //remove Citations, RegressionRegions.Parameters.OutOfRange and .missingVal props\r\n          this.scenarios.forEach((s) => {\r\n              delete s.Citations;\r\n              s.RegressionRegions.forEach((rr) => {\r\n                  rr.Parameters.forEach((p) => {\r\n                      delete p.OutOfRange;\r\n                      delete p.missingVal;\r\n                      delete p.seeDescription;\r\n                  });\r\n              });\r\n          });\r\n          //now post the scenario to get the results to pass to mainview\r\n          let regTypesIDstring = this.selectedRegTypeIDs !== undefined ? this.selectedRegTypeIDs.join(\",\") : '';\r\n          let statGrpIDstring = this.selectedStatGrpIDs !== undefined ? this.selectedStatGrpIDs.join(\",\") : '';\r\n          let regRegionsIDstring = this.selectedRegRegionIDs !== undefined ? this.selectedRegRegionIDs.join(\",\") : '';       \r\n          let sParams: URLSearchParams = new URLSearchParams();\r\n          sParams.set('regressionregions', regRegionsIDstring);\r\n          sParams.set('regressiontypes', regTypesIDstring);\r\n          sParams.set('statisticgroups', statGrpIDstring);\r\n          this._nssService.postScenarios(this.selectedRegion.ID, this.scenarios, sParams);           \r\n      }\r\n  }\r\n\r\n  //want to see a chart (which one?) ---- may delete, trying it on (ngModelChange)=\" of select\r\n  public selectChart(p: string): void {\r\n      if (p !== \"\") {\r\n          //this.selectedPlot = p;\r\n          //this.selectedPlot = undefined;\r\n          this._nssService.addChart(p);\r\n      }\r\n  }   \r\n\r\n  //number only allowed in Value\r\n  _keyPress(event: any) {\r\n      const pattern = /[0-9\\+\\-\\.\\ ]/;\r\n      let inputChar = String.fromCharCode(event.charCode);\r\n      if (!pattern.test(inputChar)) {\r\n          // invalid character, prevent input\r\n          event.preventDefault();\r\n      }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/sidebar/sidebar.component.ts","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  configFile: 'assets/config.json'\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts"],"sourceRoot":""}